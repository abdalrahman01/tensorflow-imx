// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/tools/evaluation/proto/preprocessing_steps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto;
namespace tflite {
namespace evaluation {
class CroppingParams;
class CroppingParamsDefaultTypeInternal;
extern CroppingParamsDefaultTypeInternal _CroppingParams_default_instance_;
class ImagePreprocessingStepParams;
class ImagePreprocessingStepParamsDefaultTypeInternal;
extern ImagePreprocessingStepParamsDefaultTypeInternal _ImagePreprocessingStepParams_default_instance_;
class ImageSize;
class ImageSizeDefaultTypeInternal;
extern ImageSizeDefaultTypeInternal _ImageSize_default_instance_;
class NormalizationParams;
class NormalizationParamsDefaultTypeInternal;
extern NormalizationParamsDefaultTypeInternal _NormalizationParams_default_instance_;
class NormalizationParams_PerChannelMeanValues;
class NormalizationParams_PerChannelMeanValuesDefaultTypeInternal;
extern NormalizationParams_PerChannelMeanValuesDefaultTypeInternal _NormalizationParams_PerChannelMeanValues_default_instance_;
class PaddingParams;
class PaddingParamsDefaultTypeInternal;
extern PaddingParamsDefaultTypeInternal _PaddingParams_default_instance_;
class ResizingParams;
class ResizingParamsDefaultTypeInternal;
extern ResizingParamsDefaultTypeInternal _ResizingParams_default_instance_;
}  // namespace evaluation
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> ::tflite::evaluation::CroppingParams* Arena::CreateMaybeMessage<::tflite::evaluation::CroppingParams>(Arena*);
template<> ::tflite::evaluation::ImagePreprocessingStepParams* Arena::CreateMaybeMessage<::tflite::evaluation::ImagePreprocessingStepParams>(Arena*);
template<> ::tflite::evaluation::ImageSize* Arena::CreateMaybeMessage<::tflite::evaluation::ImageSize>(Arena*);
template<> ::tflite::evaluation::NormalizationParams* Arena::CreateMaybeMessage<::tflite::evaluation::NormalizationParams>(Arena*);
template<> ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* Arena::CreateMaybeMessage<::tflite::evaluation::NormalizationParams_PerChannelMeanValues>(Arena*);
template<> ::tflite::evaluation::PaddingParams* Arena::CreateMaybeMessage<::tflite::evaluation::PaddingParams>(Arena*);
template<> ::tflite::evaluation::ResizingParams* Arena::CreateMaybeMessage<::tflite::evaluation::ResizingParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tflite {
namespace evaluation {

// ===================================================================

class ImagePreprocessingStepParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.evaluation.ImagePreprocessingStepParams) */ {
 public:
  ImagePreprocessingStepParams();
  virtual ~ImagePreprocessingStepParams();

  ImagePreprocessingStepParams(const ImagePreprocessingStepParams& from);
  ImagePreprocessingStepParams(ImagePreprocessingStepParams&& from) noexcept
    : ImagePreprocessingStepParams() {
    *this = ::std::move(from);
  }

  inline ImagePreprocessingStepParams& operator=(const ImagePreprocessingStepParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImagePreprocessingStepParams& operator=(ImagePreprocessingStepParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImagePreprocessingStepParams& default_instance();

  enum ParamsCase {
    kCroppingParams = 1,
    kResizingParams = 2,
    kPaddingParams = 3,
    kNormalizationParams = 4,
    PARAMS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImagePreprocessingStepParams* internal_default_instance() {
    return reinterpret_cast<const ImagePreprocessingStepParams*>(
               &_ImagePreprocessingStepParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImagePreprocessingStepParams& a, ImagePreprocessingStepParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ImagePreprocessingStepParams* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImagePreprocessingStepParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImagePreprocessingStepParams* New() const final {
    return CreateMaybeMessage<ImagePreprocessingStepParams>(nullptr);
  }

  ImagePreprocessingStepParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImagePreprocessingStepParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImagePreprocessingStepParams& from);
  void MergeFrom(const ImagePreprocessingStepParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImagePreprocessingStepParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.evaluation.ImagePreprocessingStepParams";
  }
  protected:
  explicit ImagePreprocessingStepParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto);
    return ::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCroppingParamsFieldNumber = 1,
    kResizingParamsFieldNumber = 2,
    kPaddingParamsFieldNumber = 3,
    kNormalizationParamsFieldNumber = 4,
  };
  // optional .tflite.evaluation.CroppingParams cropping_params = 1;
  bool has_cropping_params() const;
  void clear_cropping_params();
  const ::tflite::evaluation::CroppingParams& cropping_params() const;
  ::tflite::evaluation::CroppingParams* release_cropping_params();
  ::tflite::evaluation::CroppingParams* mutable_cropping_params();
  void set_allocated_cropping_params(::tflite::evaluation::CroppingParams* cropping_params);
  void unsafe_arena_set_allocated_cropping_params(
      ::tflite::evaluation::CroppingParams* cropping_params);
  ::tflite::evaluation::CroppingParams* unsafe_arena_release_cropping_params();

  // optional .tflite.evaluation.ResizingParams resizing_params = 2;
  bool has_resizing_params() const;
  void clear_resizing_params();
  const ::tflite::evaluation::ResizingParams& resizing_params() const;
  ::tflite::evaluation::ResizingParams* release_resizing_params();
  ::tflite::evaluation::ResizingParams* mutable_resizing_params();
  void set_allocated_resizing_params(::tflite::evaluation::ResizingParams* resizing_params);
  void unsafe_arena_set_allocated_resizing_params(
      ::tflite::evaluation::ResizingParams* resizing_params);
  ::tflite::evaluation::ResizingParams* unsafe_arena_release_resizing_params();

  // optional .tflite.evaluation.PaddingParams padding_params = 3;
  bool has_padding_params() const;
  void clear_padding_params();
  const ::tflite::evaluation::PaddingParams& padding_params() const;
  ::tflite::evaluation::PaddingParams* release_padding_params();
  ::tflite::evaluation::PaddingParams* mutable_padding_params();
  void set_allocated_padding_params(::tflite::evaluation::PaddingParams* padding_params);
  void unsafe_arena_set_allocated_padding_params(
      ::tflite::evaluation::PaddingParams* padding_params);
  ::tflite::evaluation::PaddingParams* unsafe_arena_release_padding_params();

  // optional .tflite.evaluation.NormalizationParams normalization_params = 4;
  bool has_normalization_params() const;
  void clear_normalization_params();
  const ::tflite::evaluation::NormalizationParams& normalization_params() const;
  ::tflite::evaluation::NormalizationParams* release_normalization_params();
  ::tflite::evaluation::NormalizationParams* mutable_normalization_params();
  void set_allocated_normalization_params(::tflite::evaluation::NormalizationParams* normalization_params);
  void unsafe_arena_set_allocated_normalization_params(
      ::tflite::evaluation::NormalizationParams* normalization_params);
  ::tflite::evaluation::NormalizationParams* unsafe_arena_release_normalization_params();

  void clear_params();
  ParamsCase params_case() const;
  // @@protoc_insertion_point(class_scope:tflite.evaluation.ImagePreprocessingStepParams)
 private:
  class _Internal;
  void set_has_cropping_params();
  void set_has_resizing_params();
  void set_has_padding_params();
  void set_has_normalization_params();

  inline bool has_params() const;
  inline void clear_has_params();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union ParamsUnion {
    ParamsUnion() {}
    ::tflite::evaluation::CroppingParams* cropping_params_;
    ::tflite::evaluation::ResizingParams* resizing_params_;
    ::tflite::evaluation::PaddingParams* padding_params_;
    ::tflite::evaluation::NormalizationParams* normalization_params_;
  } params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto;
};
// -------------------------------------------------------------------

class ImageSize :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.evaluation.ImageSize) */ {
 public:
  ImageSize();
  virtual ~ImageSize();

  ImageSize(const ImageSize& from);
  ImageSize(ImageSize&& from) noexcept
    : ImageSize() {
    *this = ::std::move(from);
  }

  inline ImageSize& operator=(const ImageSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSize& operator=(ImageSize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageSize* internal_default_instance() {
    return reinterpret_cast<const ImageSize*>(
               &_ImageSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImageSize& a, ImageSize& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSize* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageSize* New() const final {
    return CreateMaybeMessage<ImageSize>(nullptr);
  }

  ImageSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageSize& from);
  void MergeFrom(const ImageSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.evaluation.ImageSize";
  }
  protected:
  explicit ImageSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto);
    return ::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // required uint32 width = 1;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 height = 2;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:tflite.evaluation.ImageSize)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto;
};
// -------------------------------------------------------------------

class CroppingParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.evaluation.CroppingParams) */ {
 public:
  CroppingParams();
  virtual ~CroppingParams();

  CroppingParams(const CroppingParams& from);
  CroppingParams(CroppingParams&& from) noexcept
    : CroppingParams() {
    *this = ::std::move(from);
  }

  inline CroppingParams& operator=(const CroppingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CroppingParams& operator=(CroppingParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CroppingParams& default_instance();

  enum ParamsCase {
    kCroppingFraction = 1,
    kTargetSize = 2,
    PARAMS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CroppingParams* internal_default_instance() {
    return reinterpret_cast<const CroppingParams*>(
               &_CroppingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CroppingParams& a, CroppingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CroppingParams* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CroppingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CroppingParams* New() const final {
    return CreateMaybeMessage<CroppingParams>(nullptr);
  }

  CroppingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CroppingParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CroppingParams& from);
  void MergeFrom(const CroppingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CroppingParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.evaluation.CroppingParams";
  }
  protected:
  explicit CroppingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto);
    return ::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSquareCroppingFieldNumber = 3,
    kCroppingFractionFieldNumber = 1,
    kTargetSizeFieldNumber = 2,
  };
  // optional bool square_cropping = 3;
  bool has_square_cropping() const;
  void clear_square_cropping();
  bool square_cropping() const;
  void set_square_cropping(bool value);

  // optional float cropping_fraction = 1 [default = 0.875];
  bool has_cropping_fraction() const;
  void clear_cropping_fraction();
  float cropping_fraction() const;
  void set_cropping_fraction(float value);

  // optional .tflite.evaluation.ImageSize target_size = 2;
  bool has_target_size() const;
  void clear_target_size();
  const ::tflite::evaluation::ImageSize& target_size() const;
  ::tflite::evaluation::ImageSize* release_target_size();
  ::tflite::evaluation::ImageSize* mutable_target_size();
  void set_allocated_target_size(::tflite::evaluation::ImageSize* target_size);
  void unsafe_arena_set_allocated_target_size(
      ::tflite::evaluation::ImageSize* target_size);
  ::tflite::evaluation::ImageSize* unsafe_arena_release_target_size();

  void clear_params();
  ParamsCase params_case() const;
  // @@protoc_insertion_point(class_scope:tflite.evaluation.CroppingParams)
 private:
  class _Internal;
  void set_has_cropping_fraction();
  void set_has_target_size();

  inline bool has_params() const;
  inline void clear_has_params();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool square_cropping_;
  union ParamsUnion {
    ParamsUnion() {}
    float cropping_fraction_;
    ::tflite::evaluation::ImageSize* target_size_;
  } params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto;
};
// -------------------------------------------------------------------

class ResizingParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.evaluation.ResizingParams) */ {
 public:
  ResizingParams();
  virtual ~ResizingParams();

  ResizingParams(const ResizingParams& from);
  ResizingParams(ResizingParams&& from) noexcept
    : ResizingParams() {
    *this = ::std::move(from);
  }

  inline ResizingParams& operator=(const ResizingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResizingParams& operator=(ResizingParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResizingParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResizingParams* internal_default_instance() {
    return reinterpret_cast<const ResizingParams*>(
               &_ResizingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResizingParams& a, ResizingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ResizingParams* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResizingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResizingParams* New() const final {
    return CreateMaybeMessage<ResizingParams>(nullptr);
  }

  ResizingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResizingParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResizingParams& from);
  void MergeFrom(const ResizingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResizingParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.evaluation.ResizingParams";
  }
  protected:
  explicit ResizingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto);
    return ::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetSizeFieldNumber = 1,
    kAspectPreservingFieldNumber = 2,
  };
  // required .tflite.evaluation.ImageSize target_size = 1;
  bool has_target_size() const;
  void clear_target_size();
  const ::tflite::evaluation::ImageSize& target_size() const;
  ::tflite::evaluation::ImageSize* release_target_size();
  ::tflite::evaluation::ImageSize* mutable_target_size();
  void set_allocated_target_size(::tflite::evaluation::ImageSize* target_size);
  void unsafe_arena_set_allocated_target_size(
      ::tflite::evaluation::ImageSize* target_size);
  ::tflite::evaluation::ImageSize* unsafe_arena_release_target_size();

  // required bool aspect_preserving = 2;
  bool has_aspect_preserving() const;
  void clear_aspect_preserving();
  bool aspect_preserving() const;
  void set_aspect_preserving(bool value);

  // @@protoc_insertion_point(class_scope:tflite.evaluation.ResizingParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::tflite::evaluation::ImageSize* target_size_;
  bool aspect_preserving_;
  friend struct ::TableStruct_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto;
};
// -------------------------------------------------------------------

class PaddingParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.evaluation.PaddingParams) */ {
 public:
  PaddingParams();
  virtual ~PaddingParams();

  PaddingParams(const PaddingParams& from);
  PaddingParams(PaddingParams&& from) noexcept
    : PaddingParams() {
    *this = ::std::move(from);
  }

  inline PaddingParams& operator=(const PaddingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaddingParams& operator=(PaddingParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaddingParams& default_instance();

  enum ParamsCase {
    kTargetSize = 1,
    kSquarePadding = 2,
    PARAMS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaddingParams* internal_default_instance() {
    return reinterpret_cast<const PaddingParams*>(
               &_PaddingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PaddingParams& a, PaddingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(PaddingParams* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaddingParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaddingParams* New() const final {
    return CreateMaybeMessage<PaddingParams>(nullptr);
  }

  PaddingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaddingParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaddingParams& from);
  void MergeFrom(const PaddingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaddingParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.evaluation.PaddingParams";
  }
  protected:
  explicit PaddingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto);
    return ::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaddingValueFieldNumber = 3,
    kTargetSizeFieldNumber = 1,
    kSquarePaddingFieldNumber = 2,
  };
  // required int32 padding_value = 3;
  bool has_padding_value() const;
  void clear_padding_value();
  ::PROTOBUF_NAMESPACE_ID::int32 padding_value() const;
  void set_padding_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .tflite.evaluation.ImageSize target_size = 1;
  bool has_target_size() const;
  void clear_target_size();
  const ::tflite::evaluation::ImageSize& target_size() const;
  ::tflite::evaluation::ImageSize* release_target_size();
  ::tflite::evaluation::ImageSize* mutable_target_size();
  void set_allocated_target_size(::tflite::evaluation::ImageSize* target_size);
  void unsafe_arena_set_allocated_target_size(
      ::tflite::evaluation::ImageSize* target_size);
  ::tflite::evaluation::ImageSize* unsafe_arena_release_target_size();

  // optional bool square_padding = 2;
  bool has_square_padding() const;
  void clear_square_padding();
  bool square_padding() const;
  void set_square_padding(bool value);

  void clear_params();
  ParamsCase params_case() const;
  // @@protoc_insertion_point(class_scope:tflite.evaluation.PaddingParams)
 private:
  class _Internal;
  void set_has_target_size();
  void set_has_square_padding();

  inline bool has_params() const;
  inline void clear_has_params();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 padding_value_;
  union ParamsUnion {
    ParamsUnion() {}
    ::tflite::evaluation::ImageSize* target_size_;
    bool square_padding_;
  } params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto;
};
// -------------------------------------------------------------------

class NormalizationParams_PerChannelMeanValues :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.evaluation.NormalizationParams.PerChannelMeanValues) */ {
 public:
  NormalizationParams_PerChannelMeanValues();
  virtual ~NormalizationParams_PerChannelMeanValues();

  NormalizationParams_PerChannelMeanValues(const NormalizationParams_PerChannelMeanValues& from);
  NormalizationParams_PerChannelMeanValues(NormalizationParams_PerChannelMeanValues&& from) noexcept
    : NormalizationParams_PerChannelMeanValues() {
    *this = ::std::move(from);
  }

  inline NormalizationParams_PerChannelMeanValues& operator=(const NormalizationParams_PerChannelMeanValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizationParams_PerChannelMeanValues& operator=(NormalizationParams_PerChannelMeanValues&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NormalizationParams_PerChannelMeanValues& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalizationParams_PerChannelMeanValues* internal_default_instance() {
    return reinterpret_cast<const NormalizationParams_PerChannelMeanValues*>(
               &_NormalizationParams_PerChannelMeanValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NormalizationParams_PerChannelMeanValues& a, NormalizationParams_PerChannelMeanValues& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizationParams_PerChannelMeanValues* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizationParams_PerChannelMeanValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NormalizationParams_PerChannelMeanValues* New() const final {
    return CreateMaybeMessage<NormalizationParams_PerChannelMeanValues>(nullptr);
  }

  NormalizationParams_PerChannelMeanValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NormalizationParams_PerChannelMeanValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NormalizationParams_PerChannelMeanValues& from);
  void MergeFrom(const NormalizationParams_PerChannelMeanValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizationParams_PerChannelMeanValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.evaluation.NormalizationParams.PerChannelMeanValues";
  }
  protected:
  explicit NormalizationParams_PerChannelMeanValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto);
    return ::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRMeanFieldNumber = 1,
    kGMeanFieldNumber = 2,
    kBMeanFieldNumber = 3,
  };
  // required float r_mean = 1;
  bool has_r_mean() const;
  void clear_r_mean();
  float r_mean() const;
  void set_r_mean(float value);

  // required float g_mean = 2;
  bool has_g_mean() const;
  void clear_g_mean();
  float g_mean() const;
  void set_g_mean(float value);

  // required float b_mean = 3;
  bool has_b_mean() const;
  void clear_b_mean();
  float b_mean() const;
  void set_b_mean(float value);

  // @@protoc_insertion_point(class_scope:tflite.evaluation.NormalizationParams.PerChannelMeanValues)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float r_mean_;
  float g_mean_;
  float b_mean_;
  friend struct ::TableStruct_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto;
};
// -------------------------------------------------------------------

class NormalizationParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tflite.evaluation.NormalizationParams) */ {
 public:
  NormalizationParams();
  virtual ~NormalizationParams();

  NormalizationParams(const NormalizationParams& from);
  NormalizationParams(NormalizationParams&& from) noexcept
    : NormalizationParams() {
    *this = ::std::move(from);
  }

  inline NormalizationParams& operator=(const NormalizationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline NormalizationParams& operator=(NormalizationParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NormalizationParams& default_instance();

  enum MeanCase {
    kChannelwiseMean = 1,
    kMeans = 2,
    MEAN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalizationParams* internal_default_instance() {
    return reinterpret_cast<const NormalizationParams*>(
               &_NormalizationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NormalizationParams& a, NormalizationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(NormalizationParams* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NormalizationParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NormalizationParams* New() const final {
    return CreateMaybeMessage<NormalizationParams>(nullptr);
  }

  NormalizationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NormalizationParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NormalizationParams& from);
  void MergeFrom(const NormalizationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NormalizationParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.evaluation.NormalizationParams";
  }
  protected:
  explicit NormalizationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto);
    return ::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NormalizationParams_PerChannelMeanValues PerChannelMeanValues;

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 3,
    kChannelwiseMeanFieldNumber = 1,
    kMeansFieldNumber = 2,
  };
  // required float scale = 3 [default = 1];
  bool has_scale() const;
  void clear_scale();
  float scale() const;
  void set_scale(float value);

  // optional float channelwise_mean = 1;
  bool has_channelwise_mean() const;
  void clear_channelwise_mean();
  float channelwise_mean() const;
  void set_channelwise_mean(float value);

  // optional .tflite.evaluation.NormalizationParams.PerChannelMeanValues means = 2;
  bool has_means() const;
  void clear_means();
  const ::tflite::evaluation::NormalizationParams_PerChannelMeanValues& means() const;
  ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* release_means();
  ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* mutable_means();
  void set_allocated_means(::tflite::evaluation::NormalizationParams_PerChannelMeanValues* means);
  void unsafe_arena_set_allocated_means(
      ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* means);
  ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* unsafe_arena_release_means();

  void clear_mean();
  MeanCase mean_case() const;
  // @@protoc_insertion_point(class_scope:tflite.evaluation.NormalizationParams)
 private:
  class _Internal;
  void set_has_channelwise_mean();
  void set_has_means();

  inline bool has_mean() const;
  inline void clear_has_mean();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float scale_;
  union MeanUnion {
    MeanUnion() {}
    float channelwise_mean_;
    ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* means_;
  } mean_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImagePreprocessingStepParams

// optional .tflite.evaluation.CroppingParams cropping_params = 1;
inline bool ImagePreprocessingStepParams::has_cropping_params() const {
  return params_case() == kCroppingParams;
}
inline void ImagePreprocessingStepParams::set_has_cropping_params() {
  _oneof_case_[0] = kCroppingParams;
}
inline void ImagePreprocessingStepParams::clear_cropping_params() {
  if (has_cropping_params()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete params_.cropping_params_;
    }
    clear_has_params();
  }
}
inline ::tflite::evaluation::CroppingParams* ImagePreprocessingStepParams::release_cropping_params() {
  // @@protoc_insertion_point(field_release:tflite.evaluation.ImagePreprocessingStepParams.cropping_params)
  if (has_cropping_params()) {
    clear_has_params();
      ::tflite::evaluation::CroppingParams* temp = params_.cropping_params_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.cropping_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tflite::evaluation::CroppingParams& ImagePreprocessingStepParams::cropping_params() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.ImagePreprocessingStepParams.cropping_params)
  return has_cropping_params()
      ? *params_.cropping_params_
      : *reinterpret_cast< ::tflite::evaluation::CroppingParams*>(&::tflite::evaluation::_CroppingParams_default_instance_);
}
inline ::tflite::evaluation::CroppingParams* ImagePreprocessingStepParams::unsafe_arena_release_cropping_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tflite.evaluation.ImagePreprocessingStepParams.cropping_params)
  if (has_cropping_params()) {
    clear_has_params();
    ::tflite::evaluation::CroppingParams* temp = params_.cropping_params_;
    params_.cropping_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImagePreprocessingStepParams::unsafe_arena_set_allocated_cropping_params(::tflite::evaluation::CroppingParams* cropping_params) {
  clear_params();
  if (cropping_params) {
    set_has_cropping_params();
    params_.cropping_params_ = cropping_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ImagePreprocessingStepParams.cropping_params)
}
inline ::tflite::evaluation::CroppingParams* ImagePreprocessingStepParams::mutable_cropping_params() {
  if (!has_cropping_params()) {
    clear_params();
    set_has_cropping_params();
    params_.cropping_params_ = CreateMaybeMessage< ::tflite::evaluation::CroppingParams >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tflite.evaluation.ImagePreprocessingStepParams.cropping_params)
  return params_.cropping_params_;
}

// optional .tflite.evaluation.ResizingParams resizing_params = 2;
inline bool ImagePreprocessingStepParams::has_resizing_params() const {
  return params_case() == kResizingParams;
}
inline void ImagePreprocessingStepParams::set_has_resizing_params() {
  _oneof_case_[0] = kResizingParams;
}
inline void ImagePreprocessingStepParams::clear_resizing_params() {
  if (has_resizing_params()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete params_.resizing_params_;
    }
    clear_has_params();
  }
}
inline ::tflite::evaluation::ResizingParams* ImagePreprocessingStepParams::release_resizing_params() {
  // @@protoc_insertion_point(field_release:tflite.evaluation.ImagePreprocessingStepParams.resizing_params)
  if (has_resizing_params()) {
    clear_has_params();
      ::tflite::evaluation::ResizingParams* temp = params_.resizing_params_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.resizing_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tflite::evaluation::ResizingParams& ImagePreprocessingStepParams::resizing_params() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.ImagePreprocessingStepParams.resizing_params)
  return has_resizing_params()
      ? *params_.resizing_params_
      : *reinterpret_cast< ::tflite::evaluation::ResizingParams*>(&::tflite::evaluation::_ResizingParams_default_instance_);
}
inline ::tflite::evaluation::ResizingParams* ImagePreprocessingStepParams::unsafe_arena_release_resizing_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tflite.evaluation.ImagePreprocessingStepParams.resizing_params)
  if (has_resizing_params()) {
    clear_has_params();
    ::tflite::evaluation::ResizingParams* temp = params_.resizing_params_;
    params_.resizing_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImagePreprocessingStepParams::unsafe_arena_set_allocated_resizing_params(::tflite::evaluation::ResizingParams* resizing_params) {
  clear_params();
  if (resizing_params) {
    set_has_resizing_params();
    params_.resizing_params_ = resizing_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ImagePreprocessingStepParams.resizing_params)
}
inline ::tflite::evaluation::ResizingParams* ImagePreprocessingStepParams::mutable_resizing_params() {
  if (!has_resizing_params()) {
    clear_params();
    set_has_resizing_params();
    params_.resizing_params_ = CreateMaybeMessage< ::tflite::evaluation::ResizingParams >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tflite.evaluation.ImagePreprocessingStepParams.resizing_params)
  return params_.resizing_params_;
}

// optional .tflite.evaluation.PaddingParams padding_params = 3;
inline bool ImagePreprocessingStepParams::has_padding_params() const {
  return params_case() == kPaddingParams;
}
inline void ImagePreprocessingStepParams::set_has_padding_params() {
  _oneof_case_[0] = kPaddingParams;
}
inline void ImagePreprocessingStepParams::clear_padding_params() {
  if (has_padding_params()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete params_.padding_params_;
    }
    clear_has_params();
  }
}
inline ::tflite::evaluation::PaddingParams* ImagePreprocessingStepParams::release_padding_params() {
  // @@protoc_insertion_point(field_release:tflite.evaluation.ImagePreprocessingStepParams.padding_params)
  if (has_padding_params()) {
    clear_has_params();
      ::tflite::evaluation::PaddingParams* temp = params_.padding_params_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.padding_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tflite::evaluation::PaddingParams& ImagePreprocessingStepParams::padding_params() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.ImagePreprocessingStepParams.padding_params)
  return has_padding_params()
      ? *params_.padding_params_
      : *reinterpret_cast< ::tflite::evaluation::PaddingParams*>(&::tflite::evaluation::_PaddingParams_default_instance_);
}
inline ::tflite::evaluation::PaddingParams* ImagePreprocessingStepParams::unsafe_arena_release_padding_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tflite.evaluation.ImagePreprocessingStepParams.padding_params)
  if (has_padding_params()) {
    clear_has_params();
    ::tflite::evaluation::PaddingParams* temp = params_.padding_params_;
    params_.padding_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImagePreprocessingStepParams::unsafe_arena_set_allocated_padding_params(::tflite::evaluation::PaddingParams* padding_params) {
  clear_params();
  if (padding_params) {
    set_has_padding_params();
    params_.padding_params_ = padding_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ImagePreprocessingStepParams.padding_params)
}
inline ::tflite::evaluation::PaddingParams* ImagePreprocessingStepParams::mutable_padding_params() {
  if (!has_padding_params()) {
    clear_params();
    set_has_padding_params();
    params_.padding_params_ = CreateMaybeMessage< ::tflite::evaluation::PaddingParams >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tflite.evaluation.ImagePreprocessingStepParams.padding_params)
  return params_.padding_params_;
}

// optional .tflite.evaluation.NormalizationParams normalization_params = 4;
inline bool ImagePreprocessingStepParams::has_normalization_params() const {
  return params_case() == kNormalizationParams;
}
inline void ImagePreprocessingStepParams::set_has_normalization_params() {
  _oneof_case_[0] = kNormalizationParams;
}
inline void ImagePreprocessingStepParams::clear_normalization_params() {
  if (has_normalization_params()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete params_.normalization_params_;
    }
    clear_has_params();
  }
}
inline ::tflite::evaluation::NormalizationParams* ImagePreprocessingStepParams::release_normalization_params() {
  // @@protoc_insertion_point(field_release:tflite.evaluation.ImagePreprocessingStepParams.normalization_params)
  if (has_normalization_params()) {
    clear_has_params();
      ::tflite::evaluation::NormalizationParams* temp = params_.normalization_params_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.normalization_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tflite::evaluation::NormalizationParams& ImagePreprocessingStepParams::normalization_params() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.ImagePreprocessingStepParams.normalization_params)
  return has_normalization_params()
      ? *params_.normalization_params_
      : *reinterpret_cast< ::tflite::evaluation::NormalizationParams*>(&::tflite::evaluation::_NormalizationParams_default_instance_);
}
inline ::tflite::evaluation::NormalizationParams* ImagePreprocessingStepParams::unsafe_arena_release_normalization_params() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tflite.evaluation.ImagePreprocessingStepParams.normalization_params)
  if (has_normalization_params()) {
    clear_has_params();
    ::tflite::evaluation::NormalizationParams* temp = params_.normalization_params_;
    params_.normalization_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ImagePreprocessingStepParams::unsafe_arena_set_allocated_normalization_params(::tflite::evaluation::NormalizationParams* normalization_params) {
  clear_params();
  if (normalization_params) {
    set_has_normalization_params();
    params_.normalization_params_ = normalization_params;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ImagePreprocessingStepParams.normalization_params)
}
inline ::tflite::evaluation::NormalizationParams* ImagePreprocessingStepParams::mutable_normalization_params() {
  if (!has_normalization_params()) {
    clear_params();
    set_has_normalization_params();
    params_.normalization_params_ = CreateMaybeMessage< ::tflite::evaluation::NormalizationParams >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tflite.evaluation.ImagePreprocessingStepParams.normalization_params)
  return params_.normalization_params_;
}

inline bool ImagePreprocessingStepParams::has_params() const {
  return params_case() != PARAMS_NOT_SET;
}
inline void ImagePreprocessingStepParams::clear_has_params() {
  _oneof_case_[0] = PARAMS_NOT_SET;
}
inline ImagePreprocessingStepParams::ParamsCase ImagePreprocessingStepParams::params_case() const {
  return ImagePreprocessingStepParams::ParamsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ImageSize

// required uint32 width = 1;
inline bool ImageSize::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageSize::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageSize::width() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.ImageSize.width)
  return width_;
}
inline void ImageSize::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.ImageSize.width)
}

// required uint32 height = 2;
inline bool ImageSize::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageSize::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ImageSize::height() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.ImageSize.height)
  return height_;
}
inline void ImageSize::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.ImageSize.height)
}

// -------------------------------------------------------------------

// CroppingParams

// optional float cropping_fraction = 1 [default = 0.875];
inline bool CroppingParams::has_cropping_fraction() const {
  return params_case() == kCroppingFraction;
}
inline void CroppingParams::set_has_cropping_fraction() {
  _oneof_case_[0] = kCroppingFraction;
}
inline void CroppingParams::clear_cropping_fraction() {
  if (has_cropping_fraction()) {
    params_.cropping_fraction_ = 0.875f;
    clear_has_params();
  }
}
inline float CroppingParams::cropping_fraction() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.CroppingParams.cropping_fraction)
  if (has_cropping_fraction()) {
    return params_.cropping_fraction_;
  }
  return 0.875f;
}
inline void CroppingParams::set_cropping_fraction(float value) {
  if (!has_cropping_fraction()) {
    clear_params();
    set_has_cropping_fraction();
  }
  params_.cropping_fraction_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.CroppingParams.cropping_fraction)
}

// optional .tflite.evaluation.ImageSize target_size = 2;
inline bool CroppingParams::has_target_size() const {
  return params_case() == kTargetSize;
}
inline void CroppingParams::set_has_target_size() {
  _oneof_case_[0] = kTargetSize;
}
inline void CroppingParams::clear_target_size() {
  if (has_target_size()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete params_.target_size_;
    }
    clear_has_params();
  }
}
inline ::tflite::evaluation::ImageSize* CroppingParams::release_target_size() {
  // @@protoc_insertion_point(field_release:tflite.evaluation.CroppingParams.target_size)
  if (has_target_size()) {
    clear_has_params();
      ::tflite::evaluation::ImageSize* temp = params_.target_size_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.target_size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tflite::evaluation::ImageSize& CroppingParams::target_size() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.CroppingParams.target_size)
  return has_target_size()
      ? *params_.target_size_
      : *reinterpret_cast< ::tflite::evaluation::ImageSize*>(&::tflite::evaluation::_ImageSize_default_instance_);
}
inline ::tflite::evaluation::ImageSize* CroppingParams::unsafe_arena_release_target_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tflite.evaluation.CroppingParams.target_size)
  if (has_target_size()) {
    clear_has_params();
    ::tflite::evaluation::ImageSize* temp = params_.target_size_;
    params_.target_size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CroppingParams::unsafe_arena_set_allocated_target_size(::tflite::evaluation::ImageSize* target_size) {
  clear_params();
  if (target_size) {
    set_has_target_size();
    params_.target_size_ = target_size;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.CroppingParams.target_size)
}
inline ::tflite::evaluation::ImageSize* CroppingParams::mutable_target_size() {
  if (!has_target_size()) {
    clear_params();
    set_has_target_size();
    params_.target_size_ = CreateMaybeMessage< ::tflite::evaluation::ImageSize >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tflite.evaluation.CroppingParams.target_size)
  return params_.target_size_;
}

// optional bool square_cropping = 3;
inline bool CroppingParams::has_square_cropping() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CroppingParams::clear_square_cropping() {
  square_cropping_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CroppingParams::square_cropping() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.CroppingParams.square_cropping)
  return square_cropping_;
}
inline void CroppingParams::set_square_cropping(bool value) {
  _has_bits_[0] |= 0x00000001u;
  square_cropping_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.CroppingParams.square_cropping)
}

inline bool CroppingParams::has_params() const {
  return params_case() != PARAMS_NOT_SET;
}
inline void CroppingParams::clear_has_params() {
  _oneof_case_[0] = PARAMS_NOT_SET;
}
inline CroppingParams::ParamsCase CroppingParams::params_case() const {
  return CroppingParams::ParamsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResizingParams

// required .tflite.evaluation.ImageSize target_size = 1;
inline bool ResizingParams::has_target_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResizingParams::clear_target_size() {
  if (target_size_ != nullptr) target_size_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::tflite::evaluation::ImageSize& ResizingParams::target_size() const {
  const ::tflite::evaluation::ImageSize* p = target_size_;
  // @@protoc_insertion_point(field_get:tflite.evaluation.ResizingParams.target_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::tflite::evaluation::ImageSize*>(
      &::tflite::evaluation::_ImageSize_default_instance_);
}
inline ::tflite::evaluation::ImageSize* ResizingParams::release_target_size() {
  // @@protoc_insertion_point(field_release:tflite.evaluation.ResizingParams.target_size)
  _has_bits_[0] &= ~0x00000001u;
  ::tflite::evaluation::ImageSize* temp = target_size_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  target_size_ = nullptr;
  return temp;
}
inline ::tflite::evaluation::ImageSize* ResizingParams::unsafe_arena_release_target_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tflite.evaluation.ResizingParams.target_size)
  _has_bits_[0] &= ~0x00000001u;
  ::tflite::evaluation::ImageSize* temp = target_size_;
  target_size_ = nullptr;
  return temp;
}
inline ::tflite::evaluation::ImageSize* ResizingParams::mutable_target_size() {
  _has_bits_[0] |= 0x00000001u;
  if (target_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::tflite::evaluation::ImageSize>(GetArenaNoVirtual());
    target_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:tflite.evaluation.ResizingParams.target_size)
  return target_size_;
}
inline void ResizingParams::set_allocated_target_size(::tflite::evaluation::ImageSize* target_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete target_size_;
  }
  if (target_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target_size);
    if (message_arena != submessage_arena) {
      target_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_size_ = target_size;
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ResizingParams.target_size)
}

// required bool aspect_preserving = 2;
inline bool ResizingParams::has_aspect_preserving() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResizingParams::clear_aspect_preserving() {
  aspect_preserving_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ResizingParams::aspect_preserving() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.ResizingParams.aspect_preserving)
  return aspect_preserving_;
}
inline void ResizingParams::set_aspect_preserving(bool value) {
  _has_bits_[0] |= 0x00000002u;
  aspect_preserving_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.ResizingParams.aspect_preserving)
}

// -------------------------------------------------------------------

// PaddingParams

// optional .tflite.evaluation.ImageSize target_size = 1;
inline bool PaddingParams::has_target_size() const {
  return params_case() == kTargetSize;
}
inline void PaddingParams::set_has_target_size() {
  _oneof_case_[0] = kTargetSize;
}
inline void PaddingParams::clear_target_size() {
  if (has_target_size()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete params_.target_size_;
    }
    clear_has_params();
  }
}
inline ::tflite::evaluation::ImageSize* PaddingParams::release_target_size() {
  // @@protoc_insertion_point(field_release:tflite.evaluation.PaddingParams.target_size)
  if (has_target_size()) {
    clear_has_params();
      ::tflite::evaluation::ImageSize* temp = params_.target_size_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.target_size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tflite::evaluation::ImageSize& PaddingParams::target_size() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.PaddingParams.target_size)
  return has_target_size()
      ? *params_.target_size_
      : *reinterpret_cast< ::tflite::evaluation::ImageSize*>(&::tflite::evaluation::_ImageSize_default_instance_);
}
inline ::tflite::evaluation::ImageSize* PaddingParams::unsafe_arena_release_target_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tflite.evaluation.PaddingParams.target_size)
  if (has_target_size()) {
    clear_has_params();
    ::tflite::evaluation::ImageSize* temp = params_.target_size_;
    params_.target_size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PaddingParams::unsafe_arena_set_allocated_target_size(::tflite::evaluation::ImageSize* target_size) {
  clear_params();
  if (target_size) {
    set_has_target_size();
    params_.target_size_ = target_size;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.PaddingParams.target_size)
}
inline ::tflite::evaluation::ImageSize* PaddingParams::mutable_target_size() {
  if (!has_target_size()) {
    clear_params();
    set_has_target_size();
    params_.target_size_ = CreateMaybeMessage< ::tflite::evaluation::ImageSize >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tflite.evaluation.PaddingParams.target_size)
  return params_.target_size_;
}

// optional bool square_padding = 2;
inline bool PaddingParams::has_square_padding() const {
  return params_case() == kSquarePadding;
}
inline void PaddingParams::set_has_square_padding() {
  _oneof_case_[0] = kSquarePadding;
}
inline void PaddingParams::clear_square_padding() {
  if (has_square_padding()) {
    params_.square_padding_ = false;
    clear_has_params();
  }
}
inline bool PaddingParams::square_padding() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.PaddingParams.square_padding)
  if (has_square_padding()) {
    return params_.square_padding_;
  }
  return false;
}
inline void PaddingParams::set_square_padding(bool value) {
  if (!has_square_padding()) {
    clear_params();
    set_has_square_padding();
  }
  params_.square_padding_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.PaddingParams.square_padding)
}

// required int32 padding_value = 3;
inline bool PaddingParams::has_padding_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaddingParams::clear_padding_value() {
  padding_value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PaddingParams::padding_value() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.PaddingParams.padding_value)
  return padding_value_;
}
inline void PaddingParams::set_padding_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  padding_value_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.PaddingParams.padding_value)
}

inline bool PaddingParams::has_params() const {
  return params_case() != PARAMS_NOT_SET;
}
inline void PaddingParams::clear_has_params() {
  _oneof_case_[0] = PARAMS_NOT_SET;
}
inline PaddingParams::ParamsCase PaddingParams::params_case() const {
  return PaddingParams::ParamsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NormalizationParams_PerChannelMeanValues

// required float r_mean = 1;
inline bool NormalizationParams_PerChannelMeanValues::has_r_mean() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizationParams_PerChannelMeanValues::clear_r_mean() {
  r_mean_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float NormalizationParams_PerChannelMeanValues::r_mean() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.NormalizationParams.PerChannelMeanValues.r_mean)
  return r_mean_;
}
inline void NormalizationParams_PerChannelMeanValues::set_r_mean(float value) {
  _has_bits_[0] |= 0x00000001u;
  r_mean_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.NormalizationParams.PerChannelMeanValues.r_mean)
}

// required float g_mean = 2;
inline bool NormalizationParams_PerChannelMeanValues::has_g_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalizationParams_PerChannelMeanValues::clear_g_mean() {
  g_mean_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float NormalizationParams_PerChannelMeanValues::g_mean() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.NormalizationParams.PerChannelMeanValues.g_mean)
  return g_mean_;
}
inline void NormalizationParams_PerChannelMeanValues::set_g_mean(float value) {
  _has_bits_[0] |= 0x00000002u;
  g_mean_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.NormalizationParams.PerChannelMeanValues.g_mean)
}

// required float b_mean = 3;
inline bool NormalizationParams_PerChannelMeanValues::has_b_mean() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalizationParams_PerChannelMeanValues::clear_b_mean() {
  b_mean_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float NormalizationParams_PerChannelMeanValues::b_mean() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.NormalizationParams.PerChannelMeanValues.b_mean)
  return b_mean_;
}
inline void NormalizationParams_PerChannelMeanValues::set_b_mean(float value) {
  _has_bits_[0] |= 0x00000004u;
  b_mean_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.NormalizationParams.PerChannelMeanValues.b_mean)
}

// -------------------------------------------------------------------

// NormalizationParams

// optional float channelwise_mean = 1;
inline bool NormalizationParams::has_channelwise_mean() const {
  return mean_case() == kChannelwiseMean;
}
inline void NormalizationParams::set_has_channelwise_mean() {
  _oneof_case_[0] = kChannelwiseMean;
}
inline void NormalizationParams::clear_channelwise_mean() {
  if (has_channelwise_mean()) {
    mean_.channelwise_mean_ = 0;
    clear_has_mean();
  }
}
inline float NormalizationParams::channelwise_mean() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.NormalizationParams.channelwise_mean)
  if (has_channelwise_mean()) {
    return mean_.channelwise_mean_;
  }
  return 0;
}
inline void NormalizationParams::set_channelwise_mean(float value) {
  if (!has_channelwise_mean()) {
    clear_mean();
    set_has_channelwise_mean();
  }
  mean_.channelwise_mean_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.NormalizationParams.channelwise_mean)
}

// optional .tflite.evaluation.NormalizationParams.PerChannelMeanValues means = 2;
inline bool NormalizationParams::has_means() const {
  return mean_case() == kMeans;
}
inline void NormalizationParams::set_has_means() {
  _oneof_case_[0] = kMeans;
}
inline void NormalizationParams::clear_means() {
  if (has_means()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete mean_.means_;
    }
    clear_has_mean();
  }
}
inline ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* NormalizationParams::release_means() {
  // @@protoc_insertion_point(field_release:tflite.evaluation.NormalizationParams.means)
  if (has_means()) {
    clear_has_mean();
      ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* temp = mean_.means_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    mean_.means_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tflite::evaluation::NormalizationParams_PerChannelMeanValues& NormalizationParams::means() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.NormalizationParams.means)
  return has_means()
      ? *mean_.means_
      : *reinterpret_cast< ::tflite::evaluation::NormalizationParams_PerChannelMeanValues*>(&::tflite::evaluation::_NormalizationParams_PerChannelMeanValues_default_instance_);
}
inline ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* NormalizationParams::unsafe_arena_release_means() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tflite.evaluation.NormalizationParams.means)
  if (has_means()) {
    clear_has_mean();
    ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* temp = mean_.means_;
    mean_.means_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void NormalizationParams::unsafe_arena_set_allocated_means(::tflite::evaluation::NormalizationParams_PerChannelMeanValues* means) {
  clear_mean();
  if (means) {
    set_has_means();
    mean_.means_ = means;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.NormalizationParams.means)
}
inline ::tflite::evaluation::NormalizationParams_PerChannelMeanValues* NormalizationParams::mutable_means() {
  if (!has_means()) {
    clear_mean();
    set_has_means();
    mean_.means_ = CreateMaybeMessage< ::tflite::evaluation::NormalizationParams_PerChannelMeanValues >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:tflite.evaluation.NormalizationParams.means)
  return mean_.means_;
}

// required float scale = 3 [default = 1];
inline bool NormalizationParams::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalizationParams::clear_scale() {
  scale_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline float NormalizationParams::scale() const {
  // @@protoc_insertion_point(field_get:tflite.evaluation.NormalizationParams.scale)
  return scale_;
}
inline void NormalizationParams::set_scale(float value) {
  _has_bits_[0] |= 0x00000001u;
  scale_ = value;
  // @@protoc_insertion_point(field_set:tflite.evaluation.NormalizationParams.scale)
}

inline bool NormalizationParams::has_mean() const {
  return mean_case() != MEAN_NOT_SET;
}
inline void NormalizationParams::clear_has_mean() {
  _oneof_case_[0] = MEAN_NOT_SET;
}
inline NormalizationParams::MeanCase NormalizationParams::mean_case() const {
  return NormalizationParams::MeanCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace evaluation
}  // namespace tflite

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto
