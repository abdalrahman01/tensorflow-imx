// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/lite/tools/evaluation/proto/evaluation_stages.proto

#include "tensorflow/lite/tools/evaluation/proto/evaluation_stages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccuracyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImageClassificationMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImageClassificationParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImagePreprocessingParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ImagePreprocessingStepParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InferenceProfilerMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatencyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDetectionAveragePrecisionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectDetectionAveragePrecisionMetrics_AveragePrecision_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectDetectionAveragePrecisionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ObjectDetectionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectDetectionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDetectionResult_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDetectionResult_ObjectInstance_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TfliteInferenceMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TfliteInferenceParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopkAccuracyEvalMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopkAccuracyEvalParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto;
namespace tflite {
namespace evaluation {
class ProcessSpecificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessSpecification> _instance;
  const ::tflite::evaluation::ImagePreprocessingParams* image_preprocessing_params_;
  const ::tflite::evaluation::TopkAccuracyEvalParams* topk_accuracy_eval_params_;
  const ::tflite::evaluation::TfliteInferenceParams* tflite_inference_params_;
  const ::tflite::evaluation::ImageClassificationParams* image_classification_params_;
  const ::tflite::evaluation::ObjectDetectionAveragePrecisionParams* object_detection_average_precision_params_;
  const ::tflite::evaluation::ObjectDetectionParams* object_detection_params_;
} _ProcessSpecification_default_instance_;
class LatencyMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LatencyMetrics> _instance;
} _LatencyMetrics_default_instance_;
class AccuracyMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccuracyMetrics> _instance;
} _AccuracyMetrics_default_instance_;
class ProcessMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessMetrics> _instance;
  const ::tflite::evaluation::TopkAccuracyEvalMetrics* topk_accuracy_metrics_;
  const ::tflite::evaluation::TfliteInferenceMetrics* tflite_inference_metrics_;
  const ::tflite::evaluation::ImageClassificationMetrics* image_classification_metrics_;
  const ::tflite::evaluation::InferenceProfilerMetrics* inference_profiler_metrics_;
  const ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics* object_detection_average_precision_metrics_;
  const ::tflite::evaluation::ObjectDetectionMetrics* object_detection_metrics_;
} _ProcessMetrics_default_instance_;
class ImagePreprocessingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImagePreprocessingParams> _instance;
} _ImagePreprocessingParams_default_instance_;
class TfliteInferenceParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TfliteInferenceParams> _instance;
} _TfliteInferenceParams_default_instance_;
class TfliteInferenceMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TfliteInferenceMetrics> _instance;
} _TfliteInferenceMetrics_default_instance_;
class TopkAccuracyEvalParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopkAccuracyEvalParams> _instance;
} _TopkAccuracyEvalParams_default_instance_;
class TopkAccuracyEvalMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopkAccuracyEvalMetrics> _instance;
} _TopkAccuracyEvalMetrics_default_instance_;
class ImageClassificationParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageClassificationParams> _instance;
} _ImageClassificationParams_default_instance_;
class ImageClassificationMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageClassificationMetrics> _instance;
} _ImageClassificationMetrics_default_instance_;
class InferenceProfilerMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InferenceProfilerMetrics> _instance;
} _InferenceProfilerMetrics_default_instance_;
class ObjectDetectionResult_ObjectInstance_NormalizedBoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox> _instance;
} _ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox_default_instance_;
class ObjectDetectionResult_ObjectInstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDetectionResult_ObjectInstance> _instance;
} _ObjectDetectionResult_ObjectInstance_default_instance_;
class ObjectDetectionResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDetectionResult> _instance;
} _ObjectDetectionResult_default_instance_;
class ObjectDetectionGroundTruthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDetectionGroundTruth> _instance;
} _ObjectDetectionGroundTruth_default_instance_;
class ObjectDetectionAveragePrecisionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDetectionAveragePrecisionParams> _instance;
} _ObjectDetectionAveragePrecisionParams_default_instance_;
class ObjectDetectionAveragePrecisionMetrics_AveragePrecisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDetectionAveragePrecisionMetrics_AveragePrecision> _instance;
} _ObjectDetectionAveragePrecisionMetrics_AveragePrecision_default_instance_;
class ObjectDetectionAveragePrecisionMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDetectionAveragePrecisionMetrics> _instance;
} _ObjectDetectionAveragePrecisionMetrics_default_instance_;
class ObjectDetectionParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDetectionParams> _instance;
} _ObjectDetectionParams_default_instance_;
class ObjectDetectionMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObjectDetectionMetrics> _instance;
} _ObjectDetectionMetrics_default_instance_;
}  // namespace evaluation
}  // namespace tflite
static void InitDefaultsscc_info_AccuracyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_AccuracyMetrics_default_instance_;
    new (ptr) ::tflite::evaluation::AccuracyMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::AccuracyMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccuracyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AccuracyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {}};

static void InitDefaultsscc_info_ImageClassificationMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ImageClassificationMetrics_default_instance_;
    new (ptr) ::tflite::evaluation::ImageClassificationMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ImageClassificationMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImageClassificationMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ImageClassificationMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_LatencyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_TfliteInferenceMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_TopkAccuracyEvalMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,}};

static void InitDefaultsscc_info_ImageClassificationParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ImageClassificationParams_default_instance_;
    new (ptr) ::tflite::evaluation::ImageClassificationParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ImageClassificationParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImageClassificationParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ImageClassificationParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_TfliteInferenceParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_TopkAccuracyEvalParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,}};

static void InitDefaultsscc_info_ImagePreprocessingParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ImagePreprocessingParams_default_instance_;
    new (ptr) ::tflite::evaluation::ImagePreprocessingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ImagePreprocessingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImagePreprocessingParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ImagePreprocessingParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_ImagePreprocessingStepParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto.base,}};

static void InitDefaultsscc_info_InferenceProfilerMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_InferenceProfilerMetrics_default_instance_;
    new (ptr) ::tflite::evaluation::InferenceProfilerMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::InferenceProfilerMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InferenceProfilerMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_InferenceProfilerMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_LatencyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_AccuracyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,}};

static void InitDefaultsscc_info_LatencyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_LatencyMetrics_default_instance_;
    new (ptr) ::tflite::evaluation::LatencyMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::LatencyMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LatencyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LatencyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {}};

static void InitDefaultsscc_info_ObjectDetectionAveragePrecisionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ObjectDetectionAveragePrecisionMetrics_default_instance_;
    new (ptr) ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDetectionAveragePrecisionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ObjectDetectionAveragePrecisionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_ObjectDetectionAveragePrecisionMetrics_AveragePrecision_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,}};

static void InitDefaultsscc_info_ObjectDetectionAveragePrecisionMetrics_AveragePrecision_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ObjectDetectionAveragePrecisionMetrics_AveragePrecision_default_instance_;
    new (ptr) ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics_AveragePrecision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics_AveragePrecision::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectDetectionAveragePrecisionMetrics_AveragePrecision_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ObjectDetectionAveragePrecisionMetrics_AveragePrecision_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {}};

static void InitDefaultsscc_info_ObjectDetectionAveragePrecisionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ObjectDetectionAveragePrecisionParams_default_instance_;
    new (ptr) ::tflite::evaluation::ObjectDetectionAveragePrecisionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ObjectDetectionAveragePrecisionParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectDetectionAveragePrecisionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ObjectDetectionAveragePrecisionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {}};

static void InitDefaultsscc_info_ObjectDetectionGroundTruth_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ObjectDetectionGroundTruth_default_instance_;
    new (ptr) ::tflite::evaluation::ObjectDetectionGroundTruth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ObjectDetectionGroundTruth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDetectionGroundTruth_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ObjectDetectionGroundTruth_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_ObjectDetectionResult_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,}};

static void InitDefaultsscc_info_ObjectDetectionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ObjectDetectionMetrics_default_instance_;
    new (ptr) ::tflite::evaluation::ObjectDetectionMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ObjectDetectionMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ObjectDetectionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ObjectDetectionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_LatencyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_TfliteInferenceMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_ObjectDetectionAveragePrecisionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,}};

static void InitDefaultsscc_info_ObjectDetectionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ObjectDetectionParams_default_instance_;
    new (ptr) ::tflite::evaluation::ObjectDetectionParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ObjectDetectionParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ObjectDetectionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ObjectDetectionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_TfliteInferenceParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_ObjectDetectionAveragePrecisionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,}};

static void InitDefaultsscc_info_ObjectDetectionResult_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ObjectDetectionResult_default_instance_;
    new (ptr) ::tflite::evaluation::ObjectDetectionResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ObjectDetectionResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDetectionResult_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ObjectDetectionResult_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_ObjectDetectionResult_ObjectInstance_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,}};

static void InitDefaultsscc_info_ObjectDetectionResult_ObjectInstance_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ObjectDetectionResult_ObjectInstance_default_instance_;
    new (ptr) ::tflite::evaluation::ObjectDetectionResult_ObjectInstance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ObjectDetectionResult_ObjectInstance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDetectionResult_ObjectInstance_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ObjectDetectionResult_ObjectInstance_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,}};

static void InitDefaultsscc_info_ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox_default_instance_;
    new (ptr) ::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {}};

static void InitDefaultsscc_info_ProcessMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ProcessMetrics_default_instance_;
    new (ptr) ::tflite::evaluation::ProcessMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ProcessMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_ProcessMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_ProcessMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_LatencyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_TopkAccuracyEvalMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_TfliteInferenceMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_ImageClassificationMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_InferenceProfilerMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_ObjectDetectionAveragePrecisionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_ObjectDetectionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,}};

static void InitDefaultsscc_info_ProcessSpecification_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_ProcessSpecification_default_instance_;
    new (ptr) ::tflite::evaluation::ProcessSpecification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::ProcessSpecification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ProcessSpecification_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_ProcessSpecification_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {
      &scc_info_ImagePreprocessingParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_TopkAccuracyEvalParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_TfliteInferenceParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_ImageClassificationParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_ObjectDetectionAveragePrecisionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
      &scc_info_ObjectDetectionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,}};

static void InitDefaultsscc_info_TfliteInferenceMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_TfliteInferenceMetrics_default_instance_;
    new (ptr) ::tflite::evaluation::TfliteInferenceMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::TfliteInferenceMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TfliteInferenceMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TfliteInferenceMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {}};

static void InitDefaultsscc_info_TfliteInferenceParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_TfliteInferenceParams_default_instance_;
    new (ptr) ::tflite::evaluation::TfliteInferenceParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::TfliteInferenceParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TfliteInferenceParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TfliteInferenceParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {}};

static void InitDefaultsscc_info_TopkAccuracyEvalMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_TopkAccuracyEvalMetrics_default_instance_;
    new (ptr) ::tflite::evaluation::TopkAccuracyEvalMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::TopkAccuracyEvalMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopkAccuracyEvalMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TopkAccuracyEvalMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {}};

static void InitDefaultsscc_info_TopkAccuracyEvalParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::tflite::evaluation::_TopkAccuracyEvalParams_default_instance_;
    new (ptr) ::tflite::evaluation::TopkAccuracyEvalParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tflite::evaluation::TopkAccuracyEvalParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopkAccuracyEvalParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TopkAccuracyEvalParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ProcessSpecification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ProcessSpecification, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ProcessSpecification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::tflite::evaluation::ProcessSpecificationDefaultTypeInternal, image_preprocessing_params_),
  offsetof(::tflite::evaluation::ProcessSpecificationDefaultTypeInternal, topk_accuracy_eval_params_),
  offsetof(::tflite::evaluation::ProcessSpecificationDefaultTypeInternal, tflite_inference_params_),
  offsetof(::tflite::evaluation::ProcessSpecificationDefaultTypeInternal, image_classification_params_),
  offsetof(::tflite::evaluation::ProcessSpecificationDefaultTypeInternal, object_detection_average_precision_params_),
  offsetof(::tflite::evaluation::ProcessSpecificationDefaultTypeInternal, object_detection_params_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ProcessSpecification, params_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::LatencyMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::LatencyMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::LatencyMetrics, last_us_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::LatencyMetrics, max_us_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::LatencyMetrics, min_us_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::LatencyMetrics, sum_us_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::LatencyMetrics, avg_us_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::LatencyMetrics, std_deviation_us_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::AccuracyMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::AccuracyMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::AccuracyMetrics, max_value_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::AccuracyMetrics, min_value_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::AccuracyMetrics, avg_value_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::AccuracyMetrics, std_deviation_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ProcessMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ProcessMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ProcessMetrics, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ProcessMetrics, total_latency_),
  offsetof(::tflite::evaluation::ProcessMetricsDefaultTypeInternal, topk_accuracy_metrics_),
  offsetof(::tflite::evaluation::ProcessMetricsDefaultTypeInternal, tflite_inference_metrics_),
  offsetof(::tflite::evaluation::ProcessMetricsDefaultTypeInternal, image_classification_metrics_),
  offsetof(::tflite::evaluation::ProcessMetricsDefaultTypeInternal, inference_profiler_metrics_),
  offsetof(::tflite::evaluation::ProcessMetricsDefaultTypeInternal, object_detection_average_precision_metrics_),
  offsetof(::tflite::evaluation::ProcessMetricsDefaultTypeInternal, object_detection_metrics_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ProcessMetrics, stage_metrics_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImagePreprocessingParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImagePreprocessingParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImagePreprocessingParams, steps_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImagePreprocessingParams, output_type_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TfliteInferenceParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TfliteInferenceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TfliteInferenceParams, model_file_path_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TfliteInferenceParams, delegate_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TfliteInferenceParams, num_threads_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TfliteInferenceParams, invocations_per_run_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TfliteInferenceMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TfliteInferenceMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TfliteInferenceMetrics, num_inferences_),
  0,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TopkAccuracyEvalParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TopkAccuracyEvalParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TopkAccuracyEvalParams, k_),
  0,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TopkAccuracyEvalMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TopkAccuracyEvalMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::TopkAccuracyEvalMetrics, topk_accuracies_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImageClassificationParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImageClassificationParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImageClassificationParams, inference_params_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImageClassificationParams, topk_accuracy_eval_params_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImageClassificationMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImageClassificationMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImageClassificationMetrics, pre_processing_latency_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImageClassificationMetrics, inference_latency_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImageClassificationMetrics, inference_metrics_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ImageClassificationMetrics, topk_accuracy_metrics_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::InferenceProfilerMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::InferenceProfilerMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::InferenceProfilerMetrics, reference_latency_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::InferenceProfilerMetrics, test_latency_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::InferenceProfilerMetrics, output_errors_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox, normalized_top_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox, normalized_bottom_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox, normalized_left_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox, normalized_right_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult_ObjectInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult_ObjectInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult_ObjectInstance, class_id_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult_ObjectInstance, bounding_box_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult_ObjectInstance, score_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult, objects_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult, image_name_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionResult, image_id_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionGroundTruth, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionGroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionGroundTruth, detection_results_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionParams, num_classes_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionParams, iou_thresholds_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionParams, num_recall_points_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics_AveragePrecision, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics_AveragePrecision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics_AveragePrecision, iou_threshold_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics_AveragePrecision, average_precision_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics, individual_average_precisions_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics, overall_mean_average_precision_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionParams, inference_params_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionParams, class_offset_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionParams, ap_params_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionMetrics, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionMetrics, pre_processing_latency_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionMetrics, inference_latency_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionMetrics, inference_metrics_),
  PROTOBUF_FIELD_OFFSET(::tflite::evaluation::ObjectDetectionMetrics, average_precision_metrics_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::tflite::evaluation::ProcessSpecification)},
  { 18, 29, sizeof(::tflite::evaluation::LatencyMetrics)},
  { 35, 44, sizeof(::tflite::evaluation::AccuracyMetrics)},
  { 48, 61, sizeof(::tflite::evaluation::ProcessMetrics)},
  { 68, 75, sizeof(::tflite::evaluation::ImagePreprocessingParams)},
  { 77, 86, sizeof(::tflite::evaluation::TfliteInferenceParams)},
  { 90, 96, sizeof(::tflite::evaluation::TfliteInferenceMetrics)},
  { 97, 103, sizeof(::tflite::evaluation::TopkAccuracyEvalParams)},
  { 104, 110, sizeof(::tflite::evaluation::TopkAccuracyEvalMetrics)},
  { 111, 118, sizeof(::tflite::evaluation::ImageClassificationParams)},
  { 120, 129, sizeof(::tflite::evaluation::ImageClassificationMetrics)},
  { 133, 141, sizeof(::tflite::evaluation::InferenceProfilerMetrics)},
  { 144, 153, sizeof(::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox)},
  { 157, 165, sizeof(::tflite::evaluation::ObjectDetectionResult_ObjectInstance)},
  { 168, 176, sizeof(::tflite::evaluation::ObjectDetectionResult)},
  { 179, 185, sizeof(::tflite::evaluation::ObjectDetectionGroundTruth)},
  { 186, 194, sizeof(::tflite::evaluation::ObjectDetectionAveragePrecisionParams)},
  { 197, 204, sizeof(::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics_AveragePrecision)},
  { 206, 213, sizeof(::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics)},
  { 215, 223, sizeof(::tflite::evaluation::ObjectDetectionParams)},
  { 226, 235, sizeof(::tflite::evaluation::ObjectDetectionMetrics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ProcessSpecification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_LatencyMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_AccuracyMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ProcessMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ImagePreprocessingParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_TfliteInferenceParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_TfliteInferenceMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_TopkAccuracyEvalParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_TopkAccuracyEvalMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ImageClassificationParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ImageClassificationMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_InferenceProfilerMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ObjectDetectionResult_ObjectInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ObjectDetectionResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ObjectDetectionGroundTruth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ObjectDetectionAveragePrecisionParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ObjectDetectionAveragePrecisionMetrics_AveragePrecision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ObjectDetectionAveragePrecisionMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ObjectDetectionParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tflite::evaluation::_ObjectDetectionMetrics_default_instance_),
};

const char descriptor_table_protodef_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n>tensorflow/lite/tools/evaluation/proto"
  "/evaluation_stages.proto\022\021tflite.evaluat"
  "ion\032@tensorflow/lite/tools/evaluation/pr"
  "oto/preprocessing_steps.proto\"\241\004\n\024Proces"
  "sSpecification\022Q\n\032image_preprocessing_pa"
  "rams\030\001 \001(\0132+.tflite.evaluation.ImagePrep"
  "rocessingParamsH\000\022N\n\031topk_accuracy_eval_"
  "params\030\002 \001(\0132).tflite.evaluation.TopkAcc"
  "uracyEvalParamsH\000\022K\n\027tflite_inference_pa"
  "rams\030\003 \001(\0132(.tflite.evaluation.TfliteInf"
  "erenceParamsH\000\022S\n\033image_classification_p"
  "arams\030\004 \001(\0132,.tflite.evaluation.ImageCla"
  "ssificationParamsH\000\022m\n)object_detection_"
  "average_precision_params\030\005 \001(\01328.tflite."
  "evaluation.ObjectDetectionAveragePrecisi"
  "onParamsH\000\022K\n\027object_detection_params\030\006 "
  "\001(\0132(.tflite.evaluation.ObjectDetectionP"
  "aramsH\000B\010\n\006params\"{\n\016LatencyMetrics\022\017\n\007l"
  "ast_us\030\001 \001(\003\022\016\n\006max_us\030\002 \001(\003\022\016\n\006min_us\030\003"
  " \001(\003\022\016\n\006sum_us\030\004 \001(\003\022\016\n\006avg_us\030\005 \001(\001\022\030\n\020"
  "std_deviation_us\030\006 \001(\003\"a\n\017AccuracyMetric"
  "s\022\021\n\tmax_value\030\001 \001(\002\022\021\n\tmin_value\030\002 \001(\002\022"
  "\021\n\tavg_value\030\003 \001(\001\022\025\n\rstd_deviation\030\004 \001("
  "\002\"\341\004\n\016ProcessMetrics\0228\n\rtotal_latency\030\001 "
  "\001(\0132!.tflite.evaluation.LatencyMetrics\022K"
  "\n\025topk_accuracy_metrics\030\002 \001(\0132*.tflite.e"
  "valuation.TopkAccuracyEvalMetricsH\000\022M\n\030t"
  "flite_inference_metrics\030\003 \001(\0132).tflite.e"
  "valuation.TfliteInferenceMetricsH\000\022U\n\034im"
  "age_classification_metrics\030\004 \001(\0132-.tflit"
  "e.evaluation.ImageClassificationMetricsH"
  "\000\022Q\n\032inference_profiler_metrics\030\005 \001(\0132+."
  "tflite.evaluation.InferenceProfilerMetri"
  "csH\000\022o\n*object_detection_average_precisi"
  "on_metrics\030\006 \001(\01329.tflite.evaluation.Obj"
  "ectDetectionAveragePrecisionMetricsH\000\022M\n"
  "\030object_detection_metrics\030\007 \001(\0132).tflite"
  ".evaluation.ObjectDetectionMetricsH\000B\017\n\r"
  "stage_metrics\"o\n\030ImagePreprocessingParam"
  "s\022>\n\005steps\030\001 \003(\0132/.tflite.evaluation.Ima"
  "gePreprocessingStepParams\022\023\n\013output_type"
  "\030\002 \002(\005\"\361\001\n\025TfliteInferenceParams\022\027\n\017mode"
  "l_file_path\030\001 \001(\t\022C\n\010delegate\030\002 \001(\01621.tf"
  "lite.evaluation.TfliteInferenceParams.De"
  "legate\022\026\n\013num_threads\030\003 \001(\005:\0011\022\036\n\023invoca"
  "tions_per_run\030\004 \001(\005:\0011\"B\n\010Delegate\022\010\n\004NO"
  "NE\020\000\022\t\n\005NNAPI\020\001\022\007\n\003GPU\020\002\022\013\n\007HEXAGON\020\003\022\013\n"
  "\007XNNPACK\020\004\"0\n\026TfliteInferenceMetrics\022\026\n\016"
  "num_inferences\030\001 \001(\005\"#\n\026TopkAccuracyEval"
  "Params\022\t\n\001k\030\001 \001(\005\"2\n\027TopkAccuracyEvalMet"
  "rics\022\027\n\017topk_accuracies\030\001 \003(\002\"\255\001\n\031ImageC"
  "lassificationParams\022B\n\020inference_params\030"
  "\001 \001(\0132(.tflite.evaluation.TfliteInferenc"
  "eParams\022L\n\031topk_accuracy_eval_params\030\002 \001"
  "(\0132).tflite.evaluation.TopkAccuracyEvalP"
  "arams\"\256\002\n\032ImageClassificationMetrics\022A\n\026"
  "pre_processing_latency\030\001 \001(\0132!.tflite.ev"
  "aluation.LatencyMetrics\022<\n\021inference_lat"
  "ency\030\002 \001(\0132!.tflite.evaluation.LatencyMe"
  "trics\022D\n\021inference_metrics\030\003 \001(\0132).tflit"
  "e.evaluation.TfliteInferenceMetrics\022I\n\025t"
  "opk_accuracy_metrics\030\004 \001(\0132*.tflite.eval"
  "uation.TopkAccuracyEvalMetrics\"\314\001\n\030Infer"
  "enceProfilerMetrics\022<\n\021reference_latency"
  "\030\001 \001(\0132!.tflite.evaluation.LatencyMetric"
  "s\0227\n\014test_latency\030\002 \001(\0132!.tflite.evaluat"
  "ion.LatencyMetrics\0229\n\routput_errors\030\003 \003("
  "\0132\".tflite.evaluation.AccuracyMetrics\"\242\003"
  "\n\025ObjectDetectionResult\022H\n\007objects\030\001 \003(\013"
  "27.tflite.evaluation.ObjectDetectionResu"
  "lt.ObjectInstance\022\022\n\nimage_name\030\002 \001(\t\022\020\n"
  "\010image_id\030\003 \001(\003\032\230\002\n\016ObjectInstance\022\020\n\010cl"
  "ass_id\030\001 \001(\005\022c\n\014bounding_box\030\002 \001(\0132M.tfl"
  "ite.evaluation.ObjectDetectionResult.Obj"
  "ectInstance.NormalizedBoundingBox\022\020\n\005sco"
  "re\030\003 \001(\002:\0011\032}\n\025NormalizedBoundingBox\022\026\n\016"
  "normalized_top\030\001 \001(\002\022\031\n\021normalized_botto"
  "m\030\002 \001(\002\022\027\n\017normalized_left\030\003 \001(\002\022\030\n\020norm"
  "alized_right\030\004 \001(\002\"a\n\032ObjectDetectionGro"
  "undTruth\022C\n\021detection_results\030\001 \003(\0132(.tf"
  "lite.evaluation.ObjectDetectionResult\"t\n"
  "%ObjectDetectionAveragePrecisionParams\022\023"
  "\n\013num_classes\030\001 \001(\005\022\026\n\016iou_thresholds\030\002 "
  "\003(\002\022\036\n\021num_recall_points\030\003 \001(\005:\003100\"\211\002\n&"
  "ObjectDetectionAveragePrecisionMetrics\022q"
  "\n\035individual_average_precisions\030\001 \003(\0132J."
  "tflite.evaluation.ObjectDetectionAverage"
  "PrecisionMetrics.AveragePrecision\022&\n\036ove"
  "rall_mean_average_precision\030\002 \001(\002\032D\n\020Ave"
  "ragePrecision\022\025\n\riou_threshold\030\001 \001(\002\022\031\n\021"
  "average_precision\030\002 \001(\002\"\301\001\n\025ObjectDetect"
  "ionParams\022B\n\020inference_params\030\001 \001(\0132(.tf"
  "lite.evaluation.TfliteInferenceParams\022\027\n"
  "\014class_offset\030\002 \001(\005:\0011\022K\n\tap_params\030\003 \001("
  "\01328.tflite.evaluation.ObjectDetectionAve"
  "ragePrecisionParams\"\275\002\n\026ObjectDetectionM"
  "etrics\022A\n\026pre_processing_latency\030\001 \001(\0132!"
  ".tflite.evaluation.LatencyMetrics\022<\n\021inf"
  "erence_latency\030\002 \001(\0132!.tflite.evaluation"
  ".LatencyMetrics\022D\n\021inference_metrics\030\003 \001"
  "(\0132).tflite.evaluation.TfliteInferenceMe"
  "trics\022\\\n\031average_precision_metrics\030\004 \001(\013"
  "29.tflite.evaluation.ObjectDetectionAver"
  "agePrecisionMetricsB\030\n\021tflite.evaluation"
  "P\001\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fpreprocessing_5fsteps_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto_sccs[21] = {
  &scc_info_AccuracyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ImageClassificationMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ImageClassificationParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ImagePreprocessingParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_InferenceProfilerMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_LatencyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ObjectDetectionAveragePrecisionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ObjectDetectionAveragePrecisionMetrics_AveragePrecision_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ObjectDetectionAveragePrecisionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ObjectDetectionGroundTruth_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ObjectDetectionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ObjectDetectionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ObjectDetectionResult_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ObjectDetectionResult_ObjectInstance_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ProcessMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_ProcessSpecification_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_TfliteInferenceMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_TfliteInferenceParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_TopkAccuracyEvalMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
  &scc_info_TopkAccuracyEvalParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto_once;
static bool descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto = {
  &descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto_initialized, descriptor_table_protodef_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto, "tensorflow/lite/tools/evaluation/proto/evaluation_stages.proto", 4165,
  &descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto_once, descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto_sccs, descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto_deps, 21, 1,
  schemas, file_default_instances, TableStruct_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto::offsets,
  file_level_metadata_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto, 21, file_level_enum_descriptors_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto, file_level_service_descriptors_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto), true);
namespace tflite {
namespace evaluation {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TfliteInferenceParams_Delegate_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto);
  return file_level_enum_descriptors_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto[0];
}
bool TfliteInferenceParams_Delegate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TfliteInferenceParams_Delegate TfliteInferenceParams::NONE;
constexpr TfliteInferenceParams_Delegate TfliteInferenceParams::NNAPI;
constexpr TfliteInferenceParams_Delegate TfliteInferenceParams::GPU;
constexpr TfliteInferenceParams_Delegate TfliteInferenceParams::HEXAGON;
constexpr TfliteInferenceParams_Delegate TfliteInferenceParams::XNNPACK;
constexpr TfliteInferenceParams_Delegate TfliteInferenceParams::Delegate_MIN;
constexpr TfliteInferenceParams_Delegate TfliteInferenceParams::Delegate_MAX;
constexpr int TfliteInferenceParams::Delegate_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ProcessSpecification::InitAsDefaultInstance() {
  ::tflite::evaluation::_ProcessSpecification_default_instance_.image_preprocessing_params_ = const_cast< ::tflite::evaluation::ImagePreprocessingParams*>(
      ::tflite::evaluation::ImagePreprocessingParams::internal_default_instance());
  ::tflite::evaluation::_ProcessSpecification_default_instance_.topk_accuracy_eval_params_ = const_cast< ::tflite::evaluation::TopkAccuracyEvalParams*>(
      ::tflite::evaluation::TopkAccuracyEvalParams::internal_default_instance());
  ::tflite::evaluation::_ProcessSpecification_default_instance_.tflite_inference_params_ = const_cast< ::tflite::evaluation::TfliteInferenceParams*>(
      ::tflite::evaluation::TfliteInferenceParams::internal_default_instance());
  ::tflite::evaluation::_ProcessSpecification_default_instance_.image_classification_params_ = const_cast< ::tflite::evaluation::ImageClassificationParams*>(
      ::tflite::evaluation::ImageClassificationParams::internal_default_instance());
  ::tflite::evaluation::_ProcessSpecification_default_instance_.object_detection_average_precision_params_ = const_cast< ::tflite::evaluation::ObjectDetectionAveragePrecisionParams*>(
      ::tflite::evaluation::ObjectDetectionAveragePrecisionParams::internal_default_instance());
  ::tflite::evaluation::_ProcessSpecification_default_instance_.object_detection_params_ = const_cast< ::tflite::evaluation::ObjectDetectionParams*>(
      ::tflite::evaluation::ObjectDetectionParams::internal_default_instance());
}
class ProcessSpecification::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessSpecification>()._has_bits_);
  static const ::tflite::evaluation::ImagePreprocessingParams& image_preprocessing_params(const ProcessSpecification* msg);
  static const ::tflite::evaluation::TopkAccuracyEvalParams& topk_accuracy_eval_params(const ProcessSpecification* msg);
  static const ::tflite::evaluation::TfliteInferenceParams& tflite_inference_params(const ProcessSpecification* msg);
  static const ::tflite::evaluation::ImageClassificationParams& image_classification_params(const ProcessSpecification* msg);
  static const ::tflite::evaluation::ObjectDetectionAveragePrecisionParams& object_detection_average_precision_params(const ProcessSpecification* msg);
  static const ::tflite::evaluation::ObjectDetectionParams& object_detection_params(const ProcessSpecification* msg);
};

const ::tflite::evaluation::ImagePreprocessingParams&
ProcessSpecification::_Internal::image_preprocessing_params(const ProcessSpecification* msg) {
  return *msg->params_.image_preprocessing_params_;
}
const ::tflite::evaluation::TopkAccuracyEvalParams&
ProcessSpecification::_Internal::topk_accuracy_eval_params(const ProcessSpecification* msg) {
  return *msg->params_.topk_accuracy_eval_params_;
}
const ::tflite::evaluation::TfliteInferenceParams&
ProcessSpecification::_Internal::tflite_inference_params(const ProcessSpecification* msg) {
  return *msg->params_.tflite_inference_params_;
}
const ::tflite::evaluation::ImageClassificationParams&
ProcessSpecification::_Internal::image_classification_params(const ProcessSpecification* msg) {
  return *msg->params_.image_classification_params_;
}
const ::tflite::evaluation::ObjectDetectionAveragePrecisionParams&
ProcessSpecification::_Internal::object_detection_average_precision_params(const ProcessSpecification* msg) {
  return *msg->params_.object_detection_average_precision_params_;
}
const ::tflite::evaluation::ObjectDetectionParams&
ProcessSpecification::_Internal::object_detection_params(const ProcessSpecification* msg) {
  return *msg->params_.object_detection_params_;
}
void ProcessSpecification::set_allocated_image_preprocessing_params(::tflite::evaluation::ImagePreprocessingParams* image_preprocessing_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (image_preprocessing_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_preprocessing_params);
    if (message_arena != submessage_arena) {
      image_preprocessing_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_preprocessing_params, submessage_arena);
    }
    set_has_image_preprocessing_params();
    params_.image_preprocessing_params_ = image_preprocessing_params;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessSpecification.image_preprocessing_params)
}
void ProcessSpecification::set_allocated_topk_accuracy_eval_params(::tflite::evaluation::TopkAccuracyEvalParams* topk_accuracy_eval_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (topk_accuracy_eval_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topk_accuracy_eval_params);
    if (message_arena != submessage_arena) {
      topk_accuracy_eval_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topk_accuracy_eval_params, submessage_arena);
    }
    set_has_topk_accuracy_eval_params();
    params_.topk_accuracy_eval_params_ = topk_accuracy_eval_params;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessSpecification.topk_accuracy_eval_params)
}
void ProcessSpecification::set_allocated_tflite_inference_params(::tflite::evaluation::TfliteInferenceParams* tflite_inference_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (tflite_inference_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tflite_inference_params);
    if (message_arena != submessage_arena) {
      tflite_inference_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tflite_inference_params, submessage_arena);
    }
    set_has_tflite_inference_params();
    params_.tflite_inference_params_ = tflite_inference_params;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessSpecification.tflite_inference_params)
}
void ProcessSpecification::set_allocated_image_classification_params(::tflite::evaluation::ImageClassificationParams* image_classification_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (image_classification_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_classification_params);
    if (message_arena != submessage_arena) {
      image_classification_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_classification_params, submessage_arena);
    }
    set_has_image_classification_params();
    params_.image_classification_params_ = image_classification_params;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessSpecification.image_classification_params)
}
void ProcessSpecification::set_allocated_object_detection_average_precision_params(::tflite::evaluation::ObjectDetectionAveragePrecisionParams* object_detection_average_precision_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (object_detection_average_precision_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_detection_average_precision_params);
    if (message_arena != submessage_arena) {
      object_detection_average_precision_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_detection_average_precision_params, submessage_arena);
    }
    set_has_object_detection_average_precision_params();
    params_.object_detection_average_precision_params_ = object_detection_average_precision_params;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessSpecification.object_detection_average_precision_params)
}
void ProcessSpecification::set_allocated_object_detection_params(::tflite::evaluation::ObjectDetectionParams* object_detection_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_params();
  if (object_detection_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_detection_params);
    if (message_arena != submessage_arena) {
      object_detection_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_detection_params, submessage_arena);
    }
    set_has_object_detection_params();
    params_.object_detection_params_ = object_detection_params;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessSpecification.object_detection_params)
}
ProcessSpecification::ProcessSpecification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ProcessSpecification)
}
ProcessSpecification::ProcessSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ProcessSpecification)
}
ProcessSpecification::ProcessSpecification(const ProcessSpecification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_params();
  switch (from.params_case()) {
    case kImagePreprocessingParams: {
      mutable_image_preprocessing_params()->::tflite::evaluation::ImagePreprocessingParams::MergeFrom(from.image_preprocessing_params());
      break;
    }
    case kTopkAccuracyEvalParams: {
      mutable_topk_accuracy_eval_params()->::tflite::evaluation::TopkAccuracyEvalParams::MergeFrom(from.topk_accuracy_eval_params());
      break;
    }
    case kTfliteInferenceParams: {
      mutable_tflite_inference_params()->::tflite::evaluation::TfliteInferenceParams::MergeFrom(from.tflite_inference_params());
      break;
    }
    case kImageClassificationParams: {
      mutable_image_classification_params()->::tflite::evaluation::ImageClassificationParams::MergeFrom(from.image_classification_params());
      break;
    }
    case kObjectDetectionAveragePrecisionParams: {
      mutable_object_detection_average_precision_params()->::tflite::evaluation::ObjectDetectionAveragePrecisionParams::MergeFrom(from.object_detection_average_precision_params());
      break;
    }
    case kObjectDetectionParams: {
      mutable_object_detection_params()->::tflite::evaluation::ObjectDetectionParams::MergeFrom(from.object_detection_params());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ProcessSpecification)
}

void ProcessSpecification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessSpecification_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  clear_has_params();
}

ProcessSpecification::~ProcessSpecification() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ProcessSpecification)
  SharedDtor();
}

void ProcessSpecification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_params()) {
    clear_params();
  }
}

void ProcessSpecification::ArenaDtor(void* object) {
  ProcessSpecification* _this = reinterpret_cast< ProcessSpecification* >(object);
  (void)_this;
}
void ProcessSpecification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessSpecification& ProcessSpecification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessSpecification_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ProcessSpecification::clear_params() {
// @@protoc_insertion_point(one_of_clear_start:tflite.evaluation.ProcessSpecification)
  switch (params_case()) {
    case kImagePreprocessingParams: {
      if (GetArenaNoVirtual() == nullptr) {
        delete params_.image_preprocessing_params_;
      }
      break;
    }
    case kTopkAccuracyEvalParams: {
      if (GetArenaNoVirtual() == nullptr) {
        delete params_.topk_accuracy_eval_params_;
      }
      break;
    }
    case kTfliteInferenceParams: {
      if (GetArenaNoVirtual() == nullptr) {
        delete params_.tflite_inference_params_;
      }
      break;
    }
    case kImageClassificationParams: {
      if (GetArenaNoVirtual() == nullptr) {
        delete params_.image_classification_params_;
      }
      break;
    }
    case kObjectDetectionAveragePrecisionParams: {
      if (GetArenaNoVirtual() == nullptr) {
        delete params_.object_detection_average_precision_params_;
      }
      break;
    }
    case kObjectDetectionParams: {
      if (GetArenaNoVirtual() == nullptr) {
        delete params_.object_detection_params_;
      }
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMS_NOT_SET;
}


void ProcessSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ProcessSpecification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_params();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessSpecification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .tflite.evaluation.ImagePreprocessingParams image_preprocessing_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_image_preprocessing_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.TopkAccuracyEvalParams topk_accuracy_eval_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_topk_accuracy_eval_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.TfliteInferenceParams tflite_inference_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_tflite_inference_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.ImageClassificationParams image_classification_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_image_classification_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.ObjectDetectionAveragePrecisionParams object_detection_average_precision_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_object_detection_average_precision_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.ObjectDetectionParams object_detection_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_object_detection_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessSpecification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ProcessSpecification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tflite.evaluation.ImagePreprocessingParams image_preprocessing_params = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_image_preprocessing_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.TopkAccuracyEvalParams topk_accuracy_eval_params = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_topk_accuracy_eval_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.TfliteInferenceParams tflite_inference_params = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tflite_inference_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.ImageClassificationParams image_classification_params = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_image_classification_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.ObjectDetectionAveragePrecisionParams object_detection_average_precision_params = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_detection_average_precision_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.ObjectDetectionParams object_detection_params = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_detection_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ProcessSpecification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ProcessSpecification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessSpecification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ProcessSpecification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (params_case()) {
    case kImagePreprocessingParams:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, _Internal::image_preprocessing_params(this), output);
      break;
    case kTopkAccuracyEvalParams:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::topk_accuracy_eval_params(this), output);
      break;
    case kTfliteInferenceParams:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::tflite_inference_params(this), output);
      break;
    case kImageClassificationParams:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::image_classification_params(this), output);
      break;
    case kObjectDetectionAveragePrecisionParams:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::object_detection_average_precision_params(this), output);
      break;
    case kObjectDetectionParams:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, _Internal::object_detection_params(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ProcessSpecification)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessSpecification::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ProcessSpecification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (params_case()) {
    case kImagePreprocessingParams:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, _Internal::image_preprocessing_params(this), target);
      break;
    case kTopkAccuracyEvalParams:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::topk_accuracy_eval_params(this), target);
      break;
    case kTfliteInferenceParams:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::tflite_inference_params(this), target);
      break;
    case kImageClassificationParams:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::image_classification_params(this), target);
      break;
    case kObjectDetectionAveragePrecisionParams:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, _Internal::object_detection_average_precision_params(this), target);
      break;
    case kObjectDetectionParams:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, _Internal::object_detection_params(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ProcessSpecification)
  return target;
}

size_t ProcessSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ProcessSpecification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (params_case()) {
    // optional .tflite.evaluation.ImagePreprocessingParams image_preprocessing_params = 1;
    case kImagePreprocessingParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.image_preprocessing_params_);
      break;
    }
    // optional .tflite.evaluation.TopkAccuracyEvalParams topk_accuracy_eval_params = 2;
    case kTopkAccuracyEvalParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.topk_accuracy_eval_params_);
      break;
    }
    // optional .tflite.evaluation.TfliteInferenceParams tflite_inference_params = 3;
    case kTfliteInferenceParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.tflite_inference_params_);
      break;
    }
    // optional .tflite.evaluation.ImageClassificationParams image_classification_params = 4;
    case kImageClassificationParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.image_classification_params_);
      break;
    }
    // optional .tflite.evaluation.ObjectDetectionAveragePrecisionParams object_detection_average_precision_params = 5;
    case kObjectDetectionAveragePrecisionParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.object_detection_average_precision_params_);
      break;
    }
    // optional .tflite.evaluation.ObjectDetectionParams object_detection_params = 6;
    case kObjectDetectionParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.object_detection_params_);
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessSpecification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ProcessSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessSpecification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessSpecification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ProcessSpecification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ProcessSpecification)
    MergeFrom(*source);
  }
}

void ProcessSpecification::MergeFrom(const ProcessSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ProcessSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.params_case()) {
    case kImagePreprocessingParams: {
      mutable_image_preprocessing_params()->::tflite::evaluation::ImagePreprocessingParams::MergeFrom(from.image_preprocessing_params());
      break;
    }
    case kTopkAccuracyEvalParams: {
      mutable_topk_accuracy_eval_params()->::tflite::evaluation::TopkAccuracyEvalParams::MergeFrom(from.topk_accuracy_eval_params());
      break;
    }
    case kTfliteInferenceParams: {
      mutable_tflite_inference_params()->::tflite::evaluation::TfliteInferenceParams::MergeFrom(from.tflite_inference_params());
      break;
    }
    case kImageClassificationParams: {
      mutable_image_classification_params()->::tflite::evaluation::ImageClassificationParams::MergeFrom(from.image_classification_params());
      break;
    }
    case kObjectDetectionAveragePrecisionParams: {
      mutable_object_detection_average_precision_params()->::tflite::evaluation::ObjectDetectionAveragePrecisionParams::MergeFrom(from.object_detection_average_precision_params());
      break;
    }
    case kObjectDetectionParams: {
      mutable_object_detection_params()->::tflite::evaluation::ObjectDetectionParams::MergeFrom(from.object_detection_params());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
}

void ProcessSpecification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ProcessSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessSpecification::CopyFrom(const ProcessSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ProcessSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessSpecification::IsInitialized() const {
  switch (params_case()) {
    case kImagePreprocessingParams: {
      if (has_image_preprocessing_params()) {
        if (!this->image_preprocessing_params().IsInitialized()) return false;
      }
      break;
    }
    case kTopkAccuracyEvalParams: {
      break;
    }
    case kTfliteInferenceParams: {
      break;
    }
    case kImageClassificationParams: {
      break;
    }
    case kObjectDetectionAveragePrecisionParams: {
      break;
    }
    case kObjectDetectionParams: {
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  return true;
}

void ProcessSpecification::InternalSwap(ProcessSpecification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(params_, other->params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessSpecification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LatencyMetrics::InitAsDefaultInstance() {
}
class LatencyMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<LatencyMetrics>()._has_bits_);
  static void set_has_last_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_us(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sum_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_std_deviation_us(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LatencyMetrics::LatencyMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.LatencyMetrics)
}
LatencyMetrics::LatencyMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.LatencyMetrics)
}
LatencyMetrics::LatencyMetrics(const LatencyMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_us_, &from.last_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&std_deviation_us_) -
    reinterpret_cast<char*>(&last_us_)) + sizeof(std_deviation_us_));
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.LatencyMetrics)
}

void LatencyMetrics::SharedCtor() {
  ::memset(&last_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&std_deviation_us_) -
      reinterpret_cast<char*>(&last_us_)) + sizeof(std_deviation_us_));
}

LatencyMetrics::~LatencyMetrics() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.LatencyMetrics)
  SharedDtor();
}

void LatencyMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void LatencyMetrics::ArenaDtor(void* object) {
  LatencyMetrics* _this = reinterpret_cast< LatencyMetrics* >(object);
  (void)_this;
}
void LatencyMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatencyMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LatencyMetrics& LatencyMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LatencyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void LatencyMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.LatencyMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&last_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&std_deviation_us_) -
        reinterpret_cast<char*>(&last_us_)) + sizeof(std_deviation_us_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LatencyMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 last_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_us(&has_bits);
          last_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_us = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_us(&has_bits);
          max_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 min_us = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_us(&has_bits);
          min_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 sum_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sum_us(&has_bits);
          sum_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double avg_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_avg_us(&has_bits);
          avg_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 std_deviation_us = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_std_deviation_us(&has_bits);
          std_deviation_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LatencyMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.LatencyMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_us = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_last_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_us = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_max_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_us = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_min_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 sum_us = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_sum_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &sum_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double avg_us = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_avg_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 std_deviation_us = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_std_deviation_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &std_deviation_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.LatencyMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.LatencyMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LatencyMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.LatencyMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_us = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->last_us(), output);
  }

  // optional int64 max_us = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->max_us(), output);
  }

  // optional int64 min_us = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->min_us(), output);
  }

  // optional int64 sum_us = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->sum_us(), output);
  }

  // optional double avg_us = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->avg_us(), output);
  }

  // optional int64 std_deviation_us = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->std_deviation_us(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.LatencyMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* LatencyMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.LatencyMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_us = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->last_us(), target);
  }

  // optional int64 max_us = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->max_us(), target);
  }

  // optional int64 min_us = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->min_us(), target);
  }

  // optional int64 sum_us = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->sum_us(), target);
  }

  // optional double avg_us = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->avg_us(), target);
  }

  // optional int64 std_deviation_us = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->std_deviation_us(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.LatencyMetrics)
  return target;
}

size_t LatencyMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.LatencyMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 last_us = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_us());
    }

    // optional int64 max_us = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_us());
    }

    // optional int64 min_us = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->min_us());
    }

    // optional int64 sum_us = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->sum_us());
    }

    // optional double avg_us = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int64 std_deviation_us = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->std_deviation_us());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LatencyMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.LatencyMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const LatencyMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LatencyMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.LatencyMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.LatencyMetrics)
    MergeFrom(*source);
  }
}

void LatencyMetrics::MergeFrom(const LatencyMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.LatencyMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      last_us_ = from.last_us_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_us_ = from.max_us_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_us_ = from.min_us_;
    }
    if (cached_has_bits & 0x00000008u) {
      sum_us_ = from.sum_us_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_us_ = from.avg_us_;
    }
    if (cached_has_bits & 0x00000020u) {
      std_deviation_us_ = from.std_deviation_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LatencyMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.LatencyMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyMetrics::CopyFrom(const LatencyMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.LatencyMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyMetrics::IsInitialized() const {
  return true;
}

void LatencyMetrics::InternalSwap(LatencyMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(last_us_, other->last_us_);
  swap(max_us_, other->max_us_);
  swap(min_us_, other->min_us_);
  swap(sum_us_, other->sum_us_);
  swap(avg_us_, other->avg_us_);
  swap(std_deviation_us_, other->std_deviation_us_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccuracyMetrics::InitAsDefaultInstance() {
}
class AccuracyMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<AccuracyMetrics>()._has_bits_);
  static void set_has_max_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_std_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

AccuracyMetrics::AccuracyMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.AccuracyMetrics)
}
AccuracyMetrics::AccuracyMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.AccuracyMetrics)
}
AccuracyMetrics::AccuracyMetrics(const AccuracyMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_value_, &from.max_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&std_deviation_) -
    reinterpret_cast<char*>(&max_value_)) + sizeof(std_deviation_));
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.AccuracyMetrics)
}

void AccuracyMetrics::SharedCtor() {
  ::memset(&max_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&std_deviation_) -
      reinterpret_cast<char*>(&max_value_)) + sizeof(std_deviation_));
}

AccuracyMetrics::~AccuracyMetrics() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.AccuracyMetrics)
  SharedDtor();
}

void AccuracyMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void AccuracyMetrics::ArenaDtor(void* object) {
  AccuracyMetrics* _this = reinterpret_cast< AccuracyMetrics* >(object);
  (void)_this;
}
void AccuracyMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccuracyMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccuracyMetrics& AccuracyMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccuracyMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void AccuracyMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.AccuracyMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&max_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&std_deviation_) -
        reinterpret_cast<char*>(&max_value_)) + sizeof(std_deviation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccuracyMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float max_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_max_value(&has_bits);
          max_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float min_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_min_value(&has_bits);
          min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double avg_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_avg_value(&has_bits);
          avg_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float std_deviation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_std_deviation(&has_bits);
          std_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccuracyMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.AccuracyMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float max_value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_max_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_min_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double avg_value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_avg_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float std_deviation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_std_deviation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.AccuracyMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.AccuracyMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccuracyMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.AccuracyMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->max_value(), output);
  }

  // optional float min_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->min_value(), output);
  }

  // optional double avg_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->avg_value(), output);
  }

  // optional float std_deviation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->std_deviation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.AccuracyMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccuracyMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.AccuracyMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->max_value(), target);
  }

  // optional float min_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->min_value(), target);
  }

  // optional double avg_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->avg_value(), target);
  }

  // optional float std_deviation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->std_deviation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.AccuracyMetrics)
  return target;
}

size_t AccuracyMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.AccuracyMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float max_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float min_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional double avg_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional float std_deviation = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccuracyMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.AccuracyMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const AccuracyMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccuracyMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.AccuracyMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.AccuracyMetrics)
    MergeFrom(*source);
  }
}

void AccuracyMetrics::MergeFrom(const AccuracyMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.AccuracyMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      max_value_ = from.max_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_value_ = from.min_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_value_ = from.avg_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      std_deviation_ = from.std_deviation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccuracyMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.AccuracyMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccuracyMetrics::CopyFrom(const AccuracyMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.AccuracyMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccuracyMetrics::IsInitialized() const {
  return true;
}

void AccuracyMetrics::InternalSwap(AccuracyMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_value_, other->max_value_);
  swap(min_value_, other->min_value_);
  swap(avg_value_, other->avg_value_);
  swap(std_deviation_, other->std_deviation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccuracyMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessMetrics::InitAsDefaultInstance() {
  ::tflite::evaluation::_ProcessMetrics_default_instance_._instance.get_mutable()->total_latency_ = const_cast< ::tflite::evaluation::LatencyMetrics*>(
      ::tflite::evaluation::LatencyMetrics::internal_default_instance());
  ::tflite::evaluation::_ProcessMetrics_default_instance_.topk_accuracy_metrics_ = const_cast< ::tflite::evaluation::TopkAccuracyEvalMetrics*>(
      ::tflite::evaluation::TopkAccuracyEvalMetrics::internal_default_instance());
  ::tflite::evaluation::_ProcessMetrics_default_instance_.tflite_inference_metrics_ = const_cast< ::tflite::evaluation::TfliteInferenceMetrics*>(
      ::tflite::evaluation::TfliteInferenceMetrics::internal_default_instance());
  ::tflite::evaluation::_ProcessMetrics_default_instance_.image_classification_metrics_ = const_cast< ::tflite::evaluation::ImageClassificationMetrics*>(
      ::tflite::evaluation::ImageClassificationMetrics::internal_default_instance());
  ::tflite::evaluation::_ProcessMetrics_default_instance_.inference_profiler_metrics_ = const_cast< ::tflite::evaluation::InferenceProfilerMetrics*>(
      ::tflite::evaluation::InferenceProfilerMetrics::internal_default_instance());
  ::tflite::evaluation::_ProcessMetrics_default_instance_.object_detection_average_precision_metrics_ = const_cast< ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics*>(
      ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics::internal_default_instance());
  ::tflite::evaluation::_ProcessMetrics_default_instance_.object_detection_metrics_ = const_cast< ::tflite::evaluation::ObjectDetectionMetrics*>(
      ::tflite::evaluation::ObjectDetectionMetrics::internal_default_instance());
}
class ProcessMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<ProcessMetrics>()._has_bits_);
  static const ::tflite::evaluation::LatencyMetrics& total_latency(const ProcessMetrics* msg);
  static void set_has_total_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::evaluation::TopkAccuracyEvalMetrics& topk_accuracy_metrics(const ProcessMetrics* msg);
  static const ::tflite::evaluation::TfliteInferenceMetrics& tflite_inference_metrics(const ProcessMetrics* msg);
  static const ::tflite::evaluation::ImageClassificationMetrics& image_classification_metrics(const ProcessMetrics* msg);
  static const ::tflite::evaluation::InferenceProfilerMetrics& inference_profiler_metrics(const ProcessMetrics* msg);
  static const ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics& object_detection_average_precision_metrics(const ProcessMetrics* msg);
  static const ::tflite::evaluation::ObjectDetectionMetrics& object_detection_metrics(const ProcessMetrics* msg);
};

const ::tflite::evaluation::LatencyMetrics&
ProcessMetrics::_Internal::total_latency(const ProcessMetrics* msg) {
  return *msg->total_latency_;
}
const ::tflite::evaluation::TopkAccuracyEvalMetrics&
ProcessMetrics::_Internal::topk_accuracy_metrics(const ProcessMetrics* msg) {
  return *msg->stage_metrics_.topk_accuracy_metrics_;
}
const ::tflite::evaluation::TfliteInferenceMetrics&
ProcessMetrics::_Internal::tflite_inference_metrics(const ProcessMetrics* msg) {
  return *msg->stage_metrics_.tflite_inference_metrics_;
}
const ::tflite::evaluation::ImageClassificationMetrics&
ProcessMetrics::_Internal::image_classification_metrics(const ProcessMetrics* msg) {
  return *msg->stage_metrics_.image_classification_metrics_;
}
const ::tflite::evaluation::InferenceProfilerMetrics&
ProcessMetrics::_Internal::inference_profiler_metrics(const ProcessMetrics* msg) {
  return *msg->stage_metrics_.inference_profiler_metrics_;
}
const ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics&
ProcessMetrics::_Internal::object_detection_average_precision_metrics(const ProcessMetrics* msg) {
  return *msg->stage_metrics_.object_detection_average_precision_metrics_;
}
const ::tflite::evaluation::ObjectDetectionMetrics&
ProcessMetrics::_Internal::object_detection_metrics(const ProcessMetrics* msg) {
  return *msg->stage_metrics_.object_detection_metrics_;
}
void ProcessMetrics::unsafe_arena_set_allocated_total_latency(
    ::tflite::evaluation::LatencyMetrics* total_latency) {
  if (GetArenaNoVirtual() == nullptr) {
    delete total_latency_;
  }
  total_latency_ = total_latency;
  if (total_latency) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ProcessMetrics.total_latency)
}
void ProcessMetrics::set_allocated_topk_accuracy_metrics(::tflite::evaluation::TopkAccuracyEvalMetrics* topk_accuracy_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_stage_metrics();
  if (topk_accuracy_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(topk_accuracy_metrics);
    if (message_arena != submessage_arena) {
      topk_accuracy_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topk_accuracy_metrics, submessage_arena);
    }
    set_has_topk_accuracy_metrics();
    stage_metrics_.topk_accuracy_metrics_ = topk_accuracy_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessMetrics.topk_accuracy_metrics)
}
void ProcessMetrics::set_allocated_tflite_inference_metrics(::tflite::evaluation::TfliteInferenceMetrics* tflite_inference_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_stage_metrics();
  if (tflite_inference_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tflite_inference_metrics);
    if (message_arena != submessage_arena) {
      tflite_inference_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tflite_inference_metrics, submessage_arena);
    }
    set_has_tflite_inference_metrics();
    stage_metrics_.tflite_inference_metrics_ = tflite_inference_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessMetrics.tflite_inference_metrics)
}
void ProcessMetrics::set_allocated_image_classification_metrics(::tflite::evaluation::ImageClassificationMetrics* image_classification_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_stage_metrics();
  if (image_classification_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_classification_metrics);
    if (message_arena != submessage_arena) {
      image_classification_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_classification_metrics, submessage_arena);
    }
    set_has_image_classification_metrics();
    stage_metrics_.image_classification_metrics_ = image_classification_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessMetrics.image_classification_metrics)
}
void ProcessMetrics::set_allocated_inference_profiler_metrics(::tflite::evaluation::InferenceProfilerMetrics* inference_profiler_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_stage_metrics();
  if (inference_profiler_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inference_profiler_metrics);
    if (message_arena != submessage_arena) {
      inference_profiler_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inference_profiler_metrics, submessage_arena);
    }
    set_has_inference_profiler_metrics();
    stage_metrics_.inference_profiler_metrics_ = inference_profiler_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessMetrics.inference_profiler_metrics)
}
void ProcessMetrics::set_allocated_object_detection_average_precision_metrics(::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics* object_detection_average_precision_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_stage_metrics();
  if (object_detection_average_precision_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_detection_average_precision_metrics);
    if (message_arena != submessage_arena) {
      object_detection_average_precision_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_detection_average_precision_metrics, submessage_arena);
    }
    set_has_object_detection_average_precision_metrics();
    stage_metrics_.object_detection_average_precision_metrics_ = object_detection_average_precision_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessMetrics.object_detection_average_precision_metrics)
}
void ProcessMetrics::set_allocated_object_detection_metrics(::tflite::evaluation::ObjectDetectionMetrics* object_detection_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_stage_metrics();
  if (object_detection_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object_detection_metrics);
    if (message_arena != submessage_arena) {
      object_detection_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_detection_metrics, submessage_arena);
    }
    set_has_object_detection_metrics();
    stage_metrics_.object_detection_metrics_ = object_detection_metrics;
  }
  // @@protoc_insertion_point(field_set_allocated:tflite.evaluation.ProcessMetrics.object_detection_metrics)
}
ProcessMetrics::ProcessMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ProcessMetrics)
}
ProcessMetrics::ProcessMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ProcessMetrics)
}
ProcessMetrics::ProcessMetrics(const ProcessMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_total_latency()) {
    total_latency_ = new ::tflite::evaluation::LatencyMetrics(*from.total_latency_);
  } else {
    total_latency_ = nullptr;
  }
  clear_has_stage_metrics();
  switch (from.stage_metrics_case()) {
    case kTopkAccuracyMetrics: {
      mutable_topk_accuracy_metrics()->::tflite::evaluation::TopkAccuracyEvalMetrics::MergeFrom(from.topk_accuracy_metrics());
      break;
    }
    case kTfliteInferenceMetrics: {
      mutable_tflite_inference_metrics()->::tflite::evaluation::TfliteInferenceMetrics::MergeFrom(from.tflite_inference_metrics());
      break;
    }
    case kImageClassificationMetrics: {
      mutable_image_classification_metrics()->::tflite::evaluation::ImageClassificationMetrics::MergeFrom(from.image_classification_metrics());
      break;
    }
    case kInferenceProfilerMetrics: {
      mutable_inference_profiler_metrics()->::tflite::evaluation::InferenceProfilerMetrics::MergeFrom(from.inference_profiler_metrics());
      break;
    }
    case kObjectDetectionAveragePrecisionMetrics: {
      mutable_object_detection_average_precision_metrics()->::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics::MergeFrom(from.object_detection_average_precision_metrics());
      break;
    }
    case kObjectDetectionMetrics: {
      mutable_object_detection_metrics()->::tflite::evaluation::ObjectDetectionMetrics::MergeFrom(from.object_detection_metrics());
      break;
    }
    case STAGE_METRICS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ProcessMetrics)
}

void ProcessMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  total_latency_ = nullptr;
  clear_has_stage_metrics();
}

ProcessMetrics::~ProcessMetrics() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ProcessMetrics)
  SharedDtor();
}

void ProcessMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete total_latency_;
  if (has_stage_metrics()) {
    clear_stage_metrics();
  }
}

void ProcessMetrics::ArenaDtor(void* object) {
  ProcessMetrics* _this = reinterpret_cast< ProcessMetrics* >(object);
  (void)_this;
}
void ProcessMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProcessMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessMetrics& ProcessMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ProcessMetrics::clear_stage_metrics() {
// @@protoc_insertion_point(one_of_clear_start:tflite.evaluation.ProcessMetrics)
  switch (stage_metrics_case()) {
    case kTopkAccuracyMetrics: {
      if (GetArenaNoVirtual() == nullptr) {
        delete stage_metrics_.topk_accuracy_metrics_;
      }
      break;
    }
    case kTfliteInferenceMetrics: {
      if (GetArenaNoVirtual() == nullptr) {
        delete stage_metrics_.tflite_inference_metrics_;
      }
      break;
    }
    case kImageClassificationMetrics: {
      if (GetArenaNoVirtual() == nullptr) {
        delete stage_metrics_.image_classification_metrics_;
      }
      break;
    }
    case kInferenceProfilerMetrics: {
      if (GetArenaNoVirtual() == nullptr) {
        delete stage_metrics_.inference_profiler_metrics_;
      }
      break;
    }
    case kObjectDetectionAveragePrecisionMetrics: {
      if (GetArenaNoVirtual() == nullptr) {
        delete stage_metrics_.object_detection_average_precision_metrics_;
      }
      break;
    }
    case kObjectDetectionMetrics: {
      if (GetArenaNoVirtual() == nullptr) {
        delete stage_metrics_.object_detection_metrics_;
      }
      break;
    }
    case STAGE_METRICS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STAGE_METRICS_NOT_SET;
}


void ProcessMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ProcessMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(total_latency_ != nullptr);
    total_latency_->Clear();
  }
  clear_stage_metrics();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ProcessMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .tflite.evaluation.LatencyMetrics total_latency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_total_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.TopkAccuracyEvalMetrics topk_accuracy_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_topk_accuracy_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.TfliteInferenceMetrics tflite_inference_metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_tflite_inference_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.ImageClassificationMetrics image_classification_metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_image_classification_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.InferenceProfilerMetrics inference_profiler_metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_inference_profiler_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics object_detection_average_precision_metrics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_object_detection_average_precision_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.ObjectDetectionMetrics object_detection_metrics = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_object_detection_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ProcessMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ProcessMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tflite.evaluation.LatencyMetrics total_latency = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.TopkAccuracyEvalMetrics topk_accuracy_metrics = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_topk_accuracy_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.TfliteInferenceMetrics tflite_inference_metrics = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tflite_inference_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.ImageClassificationMetrics image_classification_metrics = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_image_classification_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.InferenceProfilerMetrics inference_profiler_metrics = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inference_profiler_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics object_detection_average_precision_metrics = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_detection_average_precision_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.ObjectDetectionMetrics object_detection_metrics = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_detection_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ProcessMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ProcessMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ProcessMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ProcessMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.LatencyMetrics total_latency = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::total_latency(this), output);
  }

  switch (stage_metrics_case()) {
    case kTopkAccuracyMetrics:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::topk_accuracy_metrics(this), output);
      break;
    case kTfliteInferenceMetrics:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::tflite_inference_metrics(this), output);
      break;
    case kImageClassificationMetrics:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::image_classification_metrics(this), output);
      break;
    case kInferenceProfilerMetrics:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::inference_profiler_metrics(this), output);
      break;
    case kObjectDetectionAveragePrecisionMetrics:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, _Internal::object_detection_average_precision_metrics(this), output);
      break;
    case kObjectDetectionMetrics:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, _Internal::object_detection_metrics(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ProcessMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ProcessMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.LatencyMetrics total_latency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::total_latency(this), target);
  }

  switch (stage_metrics_case()) {
    case kTopkAccuracyMetrics:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::topk_accuracy_metrics(this), target);
      break;
    case kTfliteInferenceMetrics:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::tflite_inference_metrics(this), target);
      break;
    case kImageClassificationMetrics:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::image_classification_metrics(this), target);
      break;
    case kInferenceProfilerMetrics:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, _Internal::inference_profiler_metrics(this), target);
      break;
    case kObjectDetectionAveragePrecisionMetrics:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, _Internal::object_detection_average_precision_metrics(this), target);
      break;
    case kObjectDetectionMetrics:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, _Internal::object_detection_metrics(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ProcessMetrics)
  return target;
}

size_t ProcessMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ProcessMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .tflite.evaluation.LatencyMetrics total_latency = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_latency_);
  }

  switch (stage_metrics_case()) {
    // optional .tflite.evaluation.TopkAccuracyEvalMetrics topk_accuracy_metrics = 2;
    case kTopkAccuracyMetrics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_metrics_.topk_accuracy_metrics_);
      break;
    }
    // optional .tflite.evaluation.TfliteInferenceMetrics tflite_inference_metrics = 3;
    case kTfliteInferenceMetrics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_metrics_.tflite_inference_metrics_);
      break;
    }
    // optional .tflite.evaluation.ImageClassificationMetrics image_classification_metrics = 4;
    case kImageClassificationMetrics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_metrics_.image_classification_metrics_);
      break;
    }
    // optional .tflite.evaluation.InferenceProfilerMetrics inference_profiler_metrics = 5;
    case kInferenceProfilerMetrics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_metrics_.inference_profiler_metrics_);
      break;
    }
    // optional .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics object_detection_average_precision_metrics = 6;
    case kObjectDetectionAveragePrecisionMetrics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_metrics_.object_detection_average_precision_metrics_);
      break;
    }
    // optional .tflite.evaluation.ObjectDetectionMetrics object_detection_metrics = 7;
    case kObjectDetectionMetrics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stage_metrics_.object_detection_metrics_);
      break;
    }
    case STAGE_METRICS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ProcessMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ProcessMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ProcessMetrics)
    MergeFrom(*source);
  }
}

void ProcessMetrics::MergeFrom(const ProcessMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ProcessMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_total_latency()) {
    mutable_total_latency()->::tflite::evaluation::LatencyMetrics::MergeFrom(from.total_latency());
  }
  switch (from.stage_metrics_case()) {
    case kTopkAccuracyMetrics: {
      mutable_topk_accuracy_metrics()->::tflite::evaluation::TopkAccuracyEvalMetrics::MergeFrom(from.topk_accuracy_metrics());
      break;
    }
    case kTfliteInferenceMetrics: {
      mutable_tflite_inference_metrics()->::tflite::evaluation::TfliteInferenceMetrics::MergeFrom(from.tflite_inference_metrics());
      break;
    }
    case kImageClassificationMetrics: {
      mutable_image_classification_metrics()->::tflite::evaluation::ImageClassificationMetrics::MergeFrom(from.image_classification_metrics());
      break;
    }
    case kInferenceProfilerMetrics: {
      mutable_inference_profiler_metrics()->::tflite::evaluation::InferenceProfilerMetrics::MergeFrom(from.inference_profiler_metrics());
      break;
    }
    case kObjectDetectionAveragePrecisionMetrics: {
      mutable_object_detection_average_precision_metrics()->::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics::MergeFrom(from.object_detection_average_precision_metrics());
      break;
    }
    case kObjectDetectionMetrics: {
      mutable_object_detection_metrics()->::tflite::evaluation::ObjectDetectionMetrics::MergeFrom(from.object_detection_metrics());
      break;
    }
    case STAGE_METRICS_NOT_SET: {
      break;
    }
  }
}

void ProcessMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ProcessMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessMetrics::CopyFrom(const ProcessMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ProcessMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessMetrics::IsInitialized() const {
  return true;
}

void ProcessMetrics::InternalSwap(ProcessMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_latency_, other->total_latency_);
  swap(stage_metrics_, other->stage_metrics_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImagePreprocessingParams::InitAsDefaultInstance() {
}
class ImagePreprocessingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ImagePreprocessingParams>()._has_bits_);
  static void set_has_output_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ImagePreprocessingParams::clear_steps() {
  steps_.Clear();
}
ImagePreprocessingParams::ImagePreprocessingParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ImagePreprocessingParams)
}
ImagePreprocessingParams::ImagePreprocessingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  steps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ImagePreprocessingParams)
}
ImagePreprocessingParams::ImagePreprocessingParams(const ImagePreprocessingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      steps_(from.steps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_type_ = from.output_type_;
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ImagePreprocessingParams)
}

void ImagePreprocessingParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImagePreprocessingParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  output_type_ = 0;
}

ImagePreprocessingParams::~ImagePreprocessingParams() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ImagePreprocessingParams)
  SharedDtor();
}

void ImagePreprocessingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ImagePreprocessingParams::ArenaDtor(void* object) {
  ImagePreprocessingParams* _this = reinterpret_cast< ImagePreprocessingParams* >(object);
  (void)_this;
}
void ImagePreprocessingParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImagePreprocessingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImagePreprocessingParams& ImagePreprocessingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImagePreprocessingParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ImagePreprocessingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ImagePreprocessingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steps_.Clear();
  output_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImagePreprocessingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tflite.evaluation.ImagePreprocessingStepParams steps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // required int32 output_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_output_type(&has_bits);
          output_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImagePreprocessingParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ImagePreprocessingParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tflite.evaluation.ImagePreprocessingStepParams steps = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_steps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 output_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_output_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &output_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ImagePreprocessingParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ImagePreprocessingParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImagePreprocessingParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ImagePreprocessingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ImagePreprocessingStepParams steps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->steps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->steps(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 output_type = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->output_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ImagePreprocessingParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* ImagePreprocessingParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ImagePreprocessingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ImagePreprocessingStepParams steps = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->steps_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->steps(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 output_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->output_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ImagePreprocessingParams)
  return target;
}

size_t ImagePreprocessingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ImagePreprocessingParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 output_type = 2;
  if (has_output_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->output_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ImagePreprocessingStepParams steps = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->steps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->steps(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImagePreprocessingParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ImagePreprocessingParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ImagePreprocessingParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImagePreprocessingParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ImagePreprocessingParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ImagePreprocessingParams)
    MergeFrom(*source);
  }
}

void ImagePreprocessingParams::MergeFrom(const ImagePreprocessingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ImagePreprocessingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steps_.MergeFrom(from.steps_);
  if (from.has_output_type()) {
    set_output_type(from.output_type());
  }
}

void ImagePreprocessingParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ImagePreprocessingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImagePreprocessingParams::CopyFrom(const ImagePreprocessingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ImagePreprocessingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImagePreprocessingParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->steps())) return false;
  return true;
}

void ImagePreprocessingParams::InternalSwap(ImagePreprocessingParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&steps_)->InternalSwap(CastToBase(&other->steps_));
  swap(output_type_, other->output_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImagePreprocessingParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TfliteInferenceParams::InitAsDefaultInstance() {
}
class TfliteInferenceParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TfliteInferenceParams>()._has_bits_);
  static void set_has_model_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delegate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_invocations_per_run(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TfliteInferenceParams::TfliteInferenceParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.TfliteInferenceParams)
}
TfliteInferenceParams::TfliteInferenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.TfliteInferenceParams)
}
TfliteInferenceParams::TfliteInferenceParams(const TfliteInferenceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_file_path()) {
    model_file_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_file_path(),
      GetArenaNoVirtual());
  }
  ::memcpy(&delegate_, &from.delegate_,
    static_cast<size_t>(reinterpret_cast<char*>(&invocations_per_run_) -
    reinterpret_cast<char*>(&delegate_)) + sizeof(invocations_per_run_));
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.TfliteInferenceParams)
}

void TfliteInferenceParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TfliteInferenceParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  model_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  delegate_ = 0;
  num_threads_ = 1;
  invocations_per_run_ = 1;
}

TfliteInferenceParams::~TfliteInferenceParams() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.TfliteInferenceParams)
  SharedDtor();
}

void TfliteInferenceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  model_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TfliteInferenceParams::ArenaDtor(void* object) {
  TfliteInferenceParams* _this = reinterpret_cast< TfliteInferenceParams* >(object);
  (void)_this;
}
void TfliteInferenceParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TfliteInferenceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TfliteInferenceParams& TfliteInferenceParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TfliteInferenceParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void TfliteInferenceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.TfliteInferenceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    model_file_path_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    delegate_ = 0;
    num_threads_ = 1;
    invocations_per_run_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TfliteInferenceParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string model_file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_model_file_path(), ptr, ctx, "tflite.evaluation.TfliteInferenceParams.model_file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.TfliteInferenceParams.Delegate delegate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tflite::evaluation::TfliteInferenceParams_Delegate_IsValid(val))) {
            set_delegate(static_cast<::tflite::evaluation::TfliteInferenceParams_Delegate>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 num_threads = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_threads(&has_bits);
          num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 invocations_per_run = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_invocations_per_run(&has_bits);
          invocations_per_run_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TfliteInferenceParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.TfliteInferenceParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string model_file_path = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_file_path()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_file_path().data(), static_cast<int>(this->model_file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "tflite.evaluation.TfliteInferenceParams.model_file_path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.TfliteInferenceParams.Delegate delegate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tflite::evaluation::TfliteInferenceParams_Delegate_IsValid(value)) {
            set_delegate(static_cast< ::tflite::evaluation::TfliteInferenceParams_Delegate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_threads = 3 [default = 1];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_threads(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 invocations_per_run = 4 [default = 1];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_invocations_per_run(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &invocations_per_run_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.TfliteInferenceParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.TfliteInferenceParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TfliteInferenceParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.TfliteInferenceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string model_file_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_file_path().data(), static_cast<int>(this->model_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.evaluation.TfliteInferenceParams.model_file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_file_path(), output);
  }

  // optional .tflite.evaluation.TfliteInferenceParams.Delegate delegate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->delegate(), output);
  }

  // optional int32 num_threads = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_threads(), output);
  }

  // optional int32 invocations_per_run = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->invocations_per_run(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.TfliteInferenceParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* TfliteInferenceParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.TfliteInferenceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string model_file_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_file_path().data(), static_cast<int>(this->model_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.evaluation.TfliteInferenceParams.model_file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->model_file_path(), target);
  }

  // optional .tflite.evaluation.TfliteInferenceParams.Delegate delegate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->delegate(), target);
  }

  // optional int32 num_threads = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_threads(), target);
  }

  // optional int32 invocations_per_run = 4 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->invocations_per_run(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.TfliteInferenceParams)
  return target;
}

size_t TfliteInferenceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.TfliteInferenceParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string model_file_path = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->model_file_path());
    }

    // optional .tflite.evaluation.TfliteInferenceParams.Delegate delegate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->delegate());
    }

    // optional int32 num_threads = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_threads());
    }

    // optional int32 invocations_per_run = 4 [default = 1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->invocations_per_run());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfliteInferenceParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.TfliteInferenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  const TfliteInferenceParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TfliteInferenceParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.TfliteInferenceParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.TfliteInferenceParams)
    MergeFrom(*source);
  }
}

void TfliteInferenceParams::MergeFrom(const TfliteInferenceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.TfliteInferenceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      set_model_file_path(from.model_file_path());
    }
    if (cached_has_bits & 0x00000002u) {
      delegate_ = from.delegate_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_threads_ = from.num_threads_;
    }
    if (cached_has_bits & 0x00000008u) {
      invocations_per_run_ = from.invocations_per_run_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TfliteInferenceParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.TfliteInferenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TfliteInferenceParams::CopyFrom(const TfliteInferenceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.TfliteInferenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfliteInferenceParams::IsInitialized() const {
  return true;
}

void TfliteInferenceParams::InternalSwap(TfliteInferenceParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  model_file_path_.Swap(&other->model_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(delegate_, other->delegate_);
  swap(num_threads_, other->num_threads_);
  swap(invocations_per_run_, other->invocations_per_run_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TfliteInferenceParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TfliteInferenceMetrics::InitAsDefaultInstance() {
}
class TfliteInferenceMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<TfliteInferenceMetrics>()._has_bits_);
  static void set_has_num_inferences(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TfliteInferenceMetrics::TfliteInferenceMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.TfliteInferenceMetrics)
}
TfliteInferenceMetrics::TfliteInferenceMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.TfliteInferenceMetrics)
}
TfliteInferenceMetrics::TfliteInferenceMetrics(const TfliteInferenceMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_inferences_ = from.num_inferences_;
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.TfliteInferenceMetrics)
}

void TfliteInferenceMetrics::SharedCtor() {
  num_inferences_ = 0;
}

TfliteInferenceMetrics::~TfliteInferenceMetrics() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.TfliteInferenceMetrics)
  SharedDtor();
}

void TfliteInferenceMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TfliteInferenceMetrics::ArenaDtor(void* object) {
  TfliteInferenceMetrics* _this = reinterpret_cast< TfliteInferenceMetrics* >(object);
  (void)_this;
}
void TfliteInferenceMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TfliteInferenceMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TfliteInferenceMetrics& TfliteInferenceMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TfliteInferenceMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void TfliteInferenceMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.TfliteInferenceMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  num_inferences_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TfliteInferenceMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_inferences = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_inferences(&has_bits);
          num_inferences_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TfliteInferenceMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.TfliteInferenceMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_inferences = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_inferences(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_inferences_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.TfliteInferenceMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.TfliteInferenceMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TfliteInferenceMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.TfliteInferenceMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_inferences = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_inferences(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.TfliteInferenceMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* TfliteInferenceMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.TfliteInferenceMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_inferences = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_inferences(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.TfliteInferenceMetrics)
  return target;
}

size_t TfliteInferenceMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.TfliteInferenceMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 num_inferences = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_inferences());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TfliteInferenceMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.TfliteInferenceMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const TfliteInferenceMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TfliteInferenceMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.TfliteInferenceMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.TfliteInferenceMetrics)
    MergeFrom(*source);
  }
}

void TfliteInferenceMetrics::MergeFrom(const TfliteInferenceMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.TfliteInferenceMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_num_inferences()) {
    set_num_inferences(from.num_inferences());
  }
}

void TfliteInferenceMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.TfliteInferenceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TfliteInferenceMetrics::CopyFrom(const TfliteInferenceMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.TfliteInferenceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TfliteInferenceMetrics::IsInitialized() const {
  return true;
}

void TfliteInferenceMetrics::InternalSwap(TfliteInferenceMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_inferences_, other->num_inferences_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TfliteInferenceMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopkAccuracyEvalParams::InitAsDefaultInstance() {
}
class TopkAccuracyEvalParams::_Internal {
 public:
  using HasBits = decltype(std::declval<TopkAccuracyEvalParams>()._has_bits_);
  static void set_has_k(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TopkAccuracyEvalParams::TopkAccuracyEvalParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.TopkAccuracyEvalParams)
}
TopkAccuracyEvalParams::TopkAccuracyEvalParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.TopkAccuracyEvalParams)
}
TopkAccuracyEvalParams::TopkAccuracyEvalParams(const TopkAccuracyEvalParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  k_ = from.k_;
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.TopkAccuracyEvalParams)
}

void TopkAccuracyEvalParams::SharedCtor() {
  k_ = 0;
}

TopkAccuracyEvalParams::~TopkAccuracyEvalParams() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.TopkAccuracyEvalParams)
  SharedDtor();
}

void TopkAccuracyEvalParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TopkAccuracyEvalParams::ArenaDtor(void* object) {
  TopkAccuracyEvalParams* _this = reinterpret_cast< TopkAccuracyEvalParams* >(object);
  (void)_this;
}
void TopkAccuracyEvalParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopkAccuracyEvalParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopkAccuracyEvalParams& TopkAccuracyEvalParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopkAccuracyEvalParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void TopkAccuracyEvalParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.TopkAccuracyEvalParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  k_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TopkAccuracyEvalParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_k(&has_bits);
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TopkAccuracyEvalParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.TopkAccuracyEvalParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 k = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_k(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.TopkAccuracyEvalParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.TopkAccuracyEvalParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TopkAccuracyEvalParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.TopkAccuracyEvalParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 k = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->k(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.TopkAccuracyEvalParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* TopkAccuracyEvalParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.TopkAccuracyEvalParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 k = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->k(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.TopkAccuracyEvalParams)
  return target;
}

size_t TopkAccuracyEvalParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.TopkAccuracyEvalParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 k = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->k());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopkAccuracyEvalParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.TopkAccuracyEvalParams)
  GOOGLE_DCHECK_NE(&from, this);
  const TopkAccuracyEvalParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopkAccuracyEvalParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.TopkAccuracyEvalParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.TopkAccuracyEvalParams)
    MergeFrom(*source);
  }
}

void TopkAccuracyEvalParams::MergeFrom(const TopkAccuracyEvalParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.TopkAccuracyEvalParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_k()) {
    set_k(from.k());
  }
}

void TopkAccuracyEvalParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.TopkAccuracyEvalParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopkAccuracyEvalParams::CopyFrom(const TopkAccuracyEvalParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.TopkAccuracyEvalParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopkAccuracyEvalParams::IsInitialized() const {
  return true;
}

void TopkAccuracyEvalParams::InternalSwap(TopkAccuracyEvalParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(k_, other->k_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopkAccuracyEvalParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopkAccuracyEvalMetrics::InitAsDefaultInstance() {
}
class TopkAccuracyEvalMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<TopkAccuracyEvalMetrics>()._has_bits_);
};

TopkAccuracyEvalMetrics::TopkAccuracyEvalMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.TopkAccuracyEvalMetrics)
}
TopkAccuracyEvalMetrics::TopkAccuracyEvalMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  topk_accuracies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.TopkAccuracyEvalMetrics)
}
TopkAccuracyEvalMetrics::TopkAccuracyEvalMetrics(const TopkAccuracyEvalMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      topk_accuracies_(from.topk_accuracies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.TopkAccuracyEvalMetrics)
}

void TopkAccuracyEvalMetrics::SharedCtor() {
}

TopkAccuracyEvalMetrics::~TopkAccuracyEvalMetrics() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.TopkAccuracyEvalMetrics)
  SharedDtor();
}

void TopkAccuracyEvalMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TopkAccuracyEvalMetrics::ArenaDtor(void* object) {
  TopkAccuracyEvalMetrics* _this = reinterpret_cast< TopkAccuracyEvalMetrics* >(object);
  (void)_this;
}
void TopkAccuracyEvalMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TopkAccuracyEvalMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopkAccuracyEvalMetrics& TopkAccuracyEvalMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopkAccuracyEvalMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void TopkAccuracyEvalMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.TopkAccuracyEvalMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topk_accuracies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TopkAccuracyEvalMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float topk_accuracies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_topk_accuracies(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 13);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_topk_accuracies(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TopkAccuracyEvalMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.TopkAccuracyEvalMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float topk_accuracies = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_topk_accuracies())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_topk_accuracies())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.TopkAccuracyEvalMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.TopkAccuracyEvalMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TopkAccuracyEvalMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.TopkAccuracyEvalMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float topk_accuracies = 1;
  for (int i = 0, n = this->topk_accuracies_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      1, this->topk_accuracies(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.TopkAccuracyEvalMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* TopkAccuracyEvalMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.TopkAccuracyEvalMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float topk_accuracies = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(1, this->topk_accuracies_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.TopkAccuracyEvalMetrics)
  return target;
}

size_t TopkAccuracyEvalMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.TopkAccuracyEvalMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float topk_accuracies = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->topk_accuracies_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->topk_accuracies_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopkAccuracyEvalMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.TopkAccuracyEvalMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const TopkAccuracyEvalMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopkAccuracyEvalMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.TopkAccuracyEvalMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.TopkAccuracyEvalMetrics)
    MergeFrom(*source);
  }
}

void TopkAccuracyEvalMetrics::MergeFrom(const TopkAccuracyEvalMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.TopkAccuracyEvalMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topk_accuracies_.MergeFrom(from.topk_accuracies_);
}

void TopkAccuracyEvalMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.TopkAccuracyEvalMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopkAccuracyEvalMetrics::CopyFrom(const TopkAccuracyEvalMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.TopkAccuracyEvalMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopkAccuracyEvalMetrics::IsInitialized() const {
  return true;
}

void TopkAccuracyEvalMetrics::InternalSwap(TopkAccuracyEvalMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  topk_accuracies_.InternalSwap(&other->topk_accuracies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopkAccuracyEvalMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageClassificationParams::InitAsDefaultInstance() {
  ::tflite::evaluation::_ImageClassificationParams_default_instance_._instance.get_mutable()->inference_params_ = const_cast< ::tflite::evaluation::TfliteInferenceParams*>(
      ::tflite::evaluation::TfliteInferenceParams::internal_default_instance());
  ::tflite::evaluation::_ImageClassificationParams_default_instance_._instance.get_mutable()->topk_accuracy_eval_params_ = const_cast< ::tflite::evaluation::TopkAccuracyEvalParams*>(
      ::tflite::evaluation::TopkAccuracyEvalParams::internal_default_instance());
}
class ImageClassificationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageClassificationParams>()._has_bits_);
  static const ::tflite::evaluation::TfliteInferenceParams& inference_params(const ImageClassificationParams* msg);
  static void set_has_inference_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::evaluation::TopkAccuracyEvalParams& topk_accuracy_eval_params(const ImageClassificationParams* msg);
  static void set_has_topk_accuracy_eval_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tflite::evaluation::TfliteInferenceParams&
ImageClassificationParams::_Internal::inference_params(const ImageClassificationParams* msg) {
  return *msg->inference_params_;
}
const ::tflite::evaluation::TopkAccuracyEvalParams&
ImageClassificationParams::_Internal::topk_accuracy_eval_params(const ImageClassificationParams* msg) {
  return *msg->topk_accuracy_eval_params_;
}
void ImageClassificationParams::unsafe_arena_set_allocated_inference_params(
    ::tflite::evaluation::TfliteInferenceParams* inference_params) {
  if (GetArenaNoVirtual() == nullptr) {
    delete inference_params_;
  }
  inference_params_ = inference_params;
  if (inference_params) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ImageClassificationParams.inference_params)
}
void ImageClassificationParams::unsafe_arena_set_allocated_topk_accuracy_eval_params(
    ::tflite::evaluation::TopkAccuracyEvalParams* topk_accuracy_eval_params) {
  if (GetArenaNoVirtual() == nullptr) {
    delete topk_accuracy_eval_params_;
  }
  topk_accuracy_eval_params_ = topk_accuracy_eval_params;
  if (topk_accuracy_eval_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ImageClassificationParams.topk_accuracy_eval_params)
}
ImageClassificationParams::ImageClassificationParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ImageClassificationParams)
}
ImageClassificationParams::ImageClassificationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ImageClassificationParams)
}
ImageClassificationParams::ImageClassificationParams(const ImageClassificationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inference_params()) {
    inference_params_ = new ::tflite::evaluation::TfliteInferenceParams(*from.inference_params_);
  } else {
    inference_params_ = nullptr;
  }
  if (from.has_topk_accuracy_eval_params()) {
    topk_accuracy_eval_params_ = new ::tflite::evaluation::TopkAccuracyEvalParams(*from.topk_accuracy_eval_params_);
  } else {
    topk_accuracy_eval_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ImageClassificationParams)
}

void ImageClassificationParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageClassificationParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  ::memset(&inference_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topk_accuracy_eval_params_) -
      reinterpret_cast<char*>(&inference_params_)) + sizeof(topk_accuracy_eval_params_));
}

ImageClassificationParams::~ImageClassificationParams() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ImageClassificationParams)
  SharedDtor();
}

void ImageClassificationParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete inference_params_;
  if (this != internal_default_instance()) delete topk_accuracy_eval_params_;
}

void ImageClassificationParams::ArenaDtor(void* object) {
  ImageClassificationParams* _this = reinterpret_cast< ImageClassificationParams* >(object);
  (void)_this;
}
void ImageClassificationParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageClassificationParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageClassificationParams& ImageClassificationParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageClassificationParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ImageClassificationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ImageClassificationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(inference_params_ != nullptr);
      inference_params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(topk_accuracy_eval_params_ != nullptr);
      topk_accuracy_eval_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImageClassificationParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .tflite.evaluation.TfliteInferenceParams inference_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_inference_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.TopkAccuracyEvalParams topk_accuracy_eval_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_topk_accuracy_eval_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImageClassificationParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ImageClassificationParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tflite.evaluation.TfliteInferenceParams inference_params = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inference_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.TopkAccuracyEvalParams topk_accuracy_eval_params = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_topk_accuracy_eval_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ImageClassificationParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ImageClassificationParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImageClassificationParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ImageClassificationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.TfliteInferenceParams inference_params = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::inference_params(this), output);
  }

  // optional .tflite.evaluation.TopkAccuracyEvalParams topk_accuracy_eval_params = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::topk_accuracy_eval_params(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ImageClassificationParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageClassificationParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ImageClassificationParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.TfliteInferenceParams inference_params = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::inference_params(this), target);
  }

  // optional .tflite.evaluation.TopkAccuracyEvalParams topk_accuracy_eval_params = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::topk_accuracy_eval_params(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ImageClassificationParams)
  return target;
}

size_t ImageClassificationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ImageClassificationParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .tflite.evaluation.TfliteInferenceParams inference_params = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_params_);
    }

    // optional .tflite.evaluation.TopkAccuracyEvalParams topk_accuracy_eval_params = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *topk_accuracy_eval_params_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageClassificationParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ImageClassificationParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageClassificationParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageClassificationParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ImageClassificationParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ImageClassificationParams)
    MergeFrom(*source);
  }
}

void ImageClassificationParams::MergeFrom(const ImageClassificationParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ImageClassificationParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_inference_params()->::tflite::evaluation::TfliteInferenceParams::MergeFrom(from.inference_params());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_topk_accuracy_eval_params()->::tflite::evaluation::TopkAccuracyEvalParams::MergeFrom(from.topk_accuracy_eval_params());
    }
  }
}

void ImageClassificationParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ImageClassificationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageClassificationParams::CopyFrom(const ImageClassificationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ImageClassificationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageClassificationParams::IsInitialized() const {
  return true;
}

void ImageClassificationParams::InternalSwap(ImageClassificationParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(inference_params_, other->inference_params_);
  swap(topk_accuracy_eval_params_, other->topk_accuracy_eval_params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageClassificationParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageClassificationMetrics::InitAsDefaultInstance() {
  ::tflite::evaluation::_ImageClassificationMetrics_default_instance_._instance.get_mutable()->pre_processing_latency_ = const_cast< ::tflite::evaluation::LatencyMetrics*>(
      ::tflite::evaluation::LatencyMetrics::internal_default_instance());
  ::tflite::evaluation::_ImageClassificationMetrics_default_instance_._instance.get_mutable()->inference_latency_ = const_cast< ::tflite::evaluation::LatencyMetrics*>(
      ::tflite::evaluation::LatencyMetrics::internal_default_instance());
  ::tflite::evaluation::_ImageClassificationMetrics_default_instance_._instance.get_mutable()->inference_metrics_ = const_cast< ::tflite::evaluation::TfliteInferenceMetrics*>(
      ::tflite::evaluation::TfliteInferenceMetrics::internal_default_instance());
  ::tflite::evaluation::_ImageClassificationMetrics_default_instance_._instance.get_mutable()->topk_accuracy_metrics_ = const_cast< ::tflite::evaluation::TopkAccuracyEvalMetrics*>(
      ::tflite::evaluation::TopkAccuracyEvalMetrics::internal_default_instance());
}
class ImageClassificationMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageClassificationMetrics>()._has_bits_);
  static const ::tflite::evaluation::LatencyMetrics& pre_processing_latency(const ImageClassificationMetrics* msg);
  static void set_has_pre_processing_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::evaluation::LatencyMetrics& inference_latency(const ImageClassificationMetrics* msg);
  static void set_has_inference_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tflite::evaluation::TfliteInferenceMetrics& inference_metrics(const ImageClassificationMetrics* msg);
  static void set_has_inference_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tflite::evaluation::TopkAccuracyEvalMetrics& topk_accuracy_metrics(const ImageClassificationMetrics* msg);
  static void set_has_topk_accuracy_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::tflite::evaluation::LatencyMetrics&
ImageClassificationMetrics::_Internal::pre_processing_latency(const ImageClassificationMetrics* msg) {
  return *msg->pre_processing_latency_;
}
const ::tflite::evaluation::LatencyMetrics&
ImageClassificationMetrics::_Internal::inference_latency(const ImageClassificationMetrics* msg) {
  return *msg->inference_latency_;
}
const ::tflite::evaluation::TfliteInferenceMetrics&
ImageClassificationMetrics::_Internal::inference_metrics(const ImageClassificationMetrics* msg) {
  return *msg->inference_metrics_;
}
const ::tflite::evaluation::TopkAccuracyEvalMetrics&
ImageClassificationMetrics::_Internal::topk_accuracy_metrics(const ImageClassificationMetrics* msg) {
  return *msg->topk_accuracy_metrics_;
}
void ImageClassificationMetrics::unsafe_arena_set_allocated_pre_processing_latency(
    ::tflite::evaluation::LatencyMetrics* pre_processing_latency) {
  if (GetArenaNoVirtual() == nullptr) {
    delete pre_processing_latency_;
  }
  pre_processing_latency_ = pre_processing_latency;
  if (pre_processing_latency) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ImageClassificationMetrics.pre_processing_latency)
}
void ImageClassificationMetrics::unsafe_arena_set_allocated_inference_latency(
    ::tflite::evaluation::LatencyMetrics* inference_latency) {
  if (GetArenaNoVirtual() == nullptr) {
    delete inference_latency_;
  }
  inference_latency_ = inference_latency;
  if (inference_latency) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ImageClassificationMetrics.inference_latency)
}
void ImageClassificationMetrics::unsafe_arena_set_allocated_inference_metrics(
    ::tflite::evaluation::TfliteInferenceMetrics* inference_metrics) {
  if (GetArenaNoVirtual() == nullptr) {
    delete inference_metrics_;
  }
  inference_metrics_ = inference_metrics;
  if (inference_metrics) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ImageClassificationMetrics.inference_metrics)
}
void ImageClassificationMetrics::unsafe_arena_set_allocated_topk_accuracy_metrics(
    ::tflite::evaluation::TopkAccuracyEvalMetrics* topk_accuracy_metrics) {
  if (GetArenaNoVirtual() == nullptr) {
    delete topk_accuracy_metrics_;
  }
  topk_accuracy_metrics_ = topk_accuracy_metrics;
  if (topk_accuracy_metrics) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ImageClassificationMetrics.topk_accuracy_metrics)
}
ImageClassificationMetrics::ImageClassificationMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ImageClassificationMetrics)
}
ImageClassificationMetrics::ImageClassificationMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ImageClassificationMetrics)
}
ImageClassificationMetrics::ImageClassificationMetrics(const ImageClassificationMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pre_processing_latency()) {
    pre_processing_latency_ = new ::tflite::evaluation::LatencyMetrics(*from.pre_processing_latency_);
  } else {
    pre_processing_latency_ = nullptr;
  }
  if (from.has_inference_latency()) {
    inference_latency_ = new ::tflite::evaluation::LatencyMetrics(*from.inference_latency_);
  } else {
    inference_latency_ = nullptr;
  }
  if (from.has_inference_metrics()) {
    inference_metrics_ = new ::tflite::evaluation::TfliteInferenceMetrics(*from.inference_metrics_);
  } else {
    inference_metrics_ = nullptr;
  }
  if (from.has_topk_accuracy_metrics()) {
    topk_accuracy_metrics_ = new ::tflite::evaluation::TopkAccuracyEvalMetrics(*from.topk_accuracy_metrics_);
  } else {
    topk_accuracy_metrics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ImageClassificationMetrics)
}

void ImageClassificationMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageClassificationMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  ::memset(&pre_processing_latency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&topk_accuracy_metrics_) -
      reinterpret_cast<char*>(&pre_processing_latency_)) + sizeof(topk_accuracy_metrics_));
}

ImageClassificationMetrics::~ImageClassificationMetrics() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ImageClassificationMetrics)
  SharedDtor();
}

void ImageClassificationMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete pre_processing_latency_;
  if (this != internal_default_instance()) delete inference_latency_;
  if (this != internal_default_instance()) delete inference_metrics_;
  if (this != internal_default_instance()) delete topk_accuracy_metrics_;
}

void ImageClassificationMetrics::ArenaDtor(void* object) {
  ImageClassificationMetrics* _this = reinterpret_cast< ImageClassificationMetrics* >(object);
  (void)_this;
}
void ImageClassificationMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageClassificationMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageClassificationMetrics& ImageClassificationMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageClassificationMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ImageClassificationMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ImageClassificationMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pre_processing_latency_ != nullptr);
      pre_processing_latency_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(inference_latency_ != nullptr);
      inference_latency_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inference_metrics_ != nullptr);
      inference_metrics_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(topk_accuracy_metrics_ != nullptr);
      topk_accuracy_metrics_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImageClassificationMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .tflite.evaluation.LatencyMetrics pre_processing_latency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pre_processing_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.LatencyMetrics inference_latency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_inference_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.TfliteInferenceMetrics inference_metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_inference_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.TopkAccuracyEvalMetrics topk_accuracy_metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_topk_accuracy_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImageClassificationMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ImageClassificationMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tflite.evaluation.LatencyMetrics pre_processing_latency = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pre_processing_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.LatencyMetrics inference_latency = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inference_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.TfliteInferenceMetrics inference_metrics = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inference_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.TopkAccuracyEvalMetrics topk_accuracy_metrics = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_topk_accuracy_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ImageClassificationMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ImageClassificationMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImageClassificationMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ImageClassificationMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.LatencyMetrics pre_processing_latency = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pre_processing_latency(this), output);
  }

  // optional .tflite.evaluation.LatencyMetrics inference_latency = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::inference_latency(this), output);
  }

  // optional .tflite.evaluation.TfliteInferenceMetrics inference_metrics = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::inference_metrics(this), output);
  }

  // optional .tflite.evaluation.TopkAccuracyEvalMetrics topk_accuracy_metrics = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::topk_accuracy_metrics(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ImageClassificationMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageClassificationMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ImageClassificationMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.LatencyMetrics pre_processing_latency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pre_processing_latency(this), target);
  }

  // optional .tflite.evaluation.LatencyMetrics inference_latency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::inference_latency(this), target);
  }

  // optional .tflite.evaluation.TfliteInferenceMetrics inference_metrics = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::inference_metrics(this), target);
  }

  // optional .tflite.evaluation.TopkAccuracyEvalMetrics topk_accuracy_metrics = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::topk_accuracy_metrics(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ImageClassificationMetrics)
  return target;
}

size_t ImageClassificationMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ImageClassificationMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .tflite.evaluation.LatencyMetrics pre_processing_latency = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pre_processing_latency_);
    }

    // optional .tflite.evaluation.LatencyMetrics inference_latency = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_latency_);
    }

    // optional .tflite.evaluation.TfliteInferenceMetrics inference_metrics = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_metrics_);
    }

    // optional .tflite.evaluation.TopkAccuracyEvalMetrics topk_accuracy_metrics = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *topk_accuracy_metrics_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageClassificationMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ImageClassificationMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageClassificationMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageClassificationMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ImageClassificationMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ImageClassificationMetrics)
    MergeFrom(*source);
  }
}

void ImageClassificationMetrics::MergeFrom(const ImageClassificationMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ImageClassificationMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pre_processing_latency()->::tflite::evaluation::LatencyMetrics::MergeFrom(from.pre_processing_latency());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_inference_latency()->::tflite::evaluation::LatencyMetrics::MergeFrom(from.inference_latency());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_inference_metrics()->::tflite::evaluation::TfliteInferenceMetrics::MergeFrom(from.inference_metrics());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_topk_accuracy_metrics()->::tflite::evaluation::TopkAccuracyEvalMetrics::MergeFrom(from.topk_accuracy_metrics());
    }
  }
}

void ImageClassificationMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ImageClassificationMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageClassificationMetrics::CopyFrom(const ImageClassificationMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ImageClassificationMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageClassificationMetrics::IsInitialized() const {
  return true;
}

void ImageClassificationMetrics::InternalSwap(ImageClassificationMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pre_processing_latency_, other->pre_processing_latency_);
  swap(inference_latency_, other->inference_latency_);
  swap(inference_metrics_, other->inference_metrics_);
  swap(topk_accuracy_metrics_, other->topk_accuracy_metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageClassificationMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InferenceProfilerMetrics::InitAsDefaultInstance() {
  ::tflite::evaluation::_InferenceProfilerMetrics_default_instance_._instance.get_mutable()->reference_latency_ = const_cast< ::tflite::evaluation::LatencyMetrics*>(
      ::tflite::evaluation::LatencyMetrics::internal_default_instance());
  ::tflite::evaluation::_InferenceProfilerMetrics_default_instance_._instance.get_mutable()->test_latency_ = const_cast< ::tflite::evaluation::LatencyMetrics*>(
      ::tflite::evaluation::LatencyMetrics::internal_default_instance());
}
class InferenceProfilerMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<InferenceProfilerMetrics>()._has_bits_);
  static const ::tflite::evaluation::LatencyMetrics& reference_latency(const InferenceProfilerMetrics* msg);
  static void set_has_reference_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::evaluation::LatencyMetrics& test_latency(const InferenceProfilerMetrics* msg);
  static void set_has_test_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tflite::evaluation::LatencyMetrics&
InferenceProfilerMetrics::_Internal::reference_latency(const InferenceProfilerMetrics* msg) {
  return *msg->reference_latency_;
}
const ::tflite::evaluation::LatencyMetrics&
InferenceProfilerMetrics::_Internal::test_latency(const InferenceProfilerMetrics* msg) {
  return *msg->test_latency_;
}
void InferenceProfilerMetrics::unsafe_arena_set_allocated_reference_latency(
    ::tflite::evaluation::LatencyMetrics* reference_latency) {
  if (GetArenaNoVirtual() == nullptr) {
    delete reference_latency_;
  }
  reference_latency_ = reference_latency;
  if (reference_latency) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.InferenceProfilerMetrics.reference_latency)
}
void InferenceProfilerMetrics::unsafe_arena_set_allocated_test_latency(
    ::tflite::evaluation::LatencyMetrics* test_latency) {
  if (GetArenaNoVirtual() == nullptr) {
    delete test_latency_;
  }
  test_latency_ = test_latency;
  if (test_latency) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.InferenceProfilerMetrics.test_latency)
}
InferenceProfilerMetrics::InferenceProfilerMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.InferenceProfilerMetrics)
}
InferenceProfilerMetrics::InferenceProfilerMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  output_errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.InferenceProfilerMetrics)
}
InferenceProfilerMetrics::InferenceProfilerMetrics(const InferenceProfilerMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      output_errors_(from.output_errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_reference_latency()) {
    reference_latency_ = new ::tflite::evaluation::LatencyMetrics(*from.reference_latency_);
  } else {
    reference_latency_ = nullptr;
  }
  if (from.has_test_latency()) {
    test_latency_ = new ::tflite::evaluation::LatencyMetrics(*from.test_latency_);
  } else {
    test_latency_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.InferenceProfilerMetrics)
}

void InferenceProfilerMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InferenceProfilerMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  ::memset(&reference_latency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_latency_) -
      reinterpret_cast<char*>(&reference_latency_)) + sizeof(test_latency_));
}

InferenceProfilerMetrics::~InferenceProfilerMetrics() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.InferenceProfilerMetrics)
  SharedDtor();
}

void InferenceProfilerMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete reference_latency_;
  if (this != internal_default_instance()) delete test_latency_;
}

void InferenceProfilerMetrics::ArenaDtor(void* object) {
  InferenceProfilerMetrics* _this = reinterpret_cast< InferenceProfilerMetrics* >(object);
  (void)_this;
}
void InferenceProfilerMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InferenceProfilerMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InferenceProfilerMetrics& InferenceProfilerMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InferenceProfilerMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void InferenceProfilerMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.InferenceProfilerMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_errors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(reference_latency_ != nullptr);
      reference_latency_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(test_latency_ != nullptr);
      test_latency_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InferenceProfilerMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .tflite.evaluation.LatencyMetrics reference_latency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_reference_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.LatencyMetrics test_latency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_test_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .tflite.evaluation.AccuracyMetrics output_errors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_output_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InferenceProfilerMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.InferenceProfilerMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tflite.evaluation.LatencyMetrics reference_latency = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.LatencyMetrics test_latency = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_test_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tflite.evaluation.AccuracyMetrics output_errors = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_output_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.InferenceProfilerMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.InferenceProfilerMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InferenceProfilerMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.InferenceProfilerMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.LatencyMetrics reference_latency = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::reference_latency(this), output);
  }

  // optional .tflite.evaluation.LatencyMetrics test_latency = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::test_latency(this), output);
  }

  // repeated .tflite.evaluation.AccuracyMetrics output_errors = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_errors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->output_errors(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.InferenceProfilerMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* InferenceProfilerMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.InferenceProfilerMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.LatencyMetrics reference_latency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::reference_latency(this), target);
  }

  // optional .tflite.evaluation.LatencyMetrics test_latency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::test_latency(this), target);
  }

  // repeated .tflite.evaluation.AccuracyMetrics output_errors = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_errors_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->output_errors(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.InferenceProfilerMetrics)
  return target;
}

size_t InferenceProfilerMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.InferenceProfilerMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.evaluation.AccuracyMetrics output_errors = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->output_errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->output_errors(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .tflite.evaluation.LatencyMetrics reference_latency = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reference_latency_);
    }

    // optional .tflite.evaluation.LatencyMetrics test_latency = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *test_latency_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InferenceProfilerMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.InferenceProfilerMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const InferenceProfilerMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InferenceProfilerMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.InferenceProfilerMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.InferenceProfilerMetrics)
    MergeFrom(*source);
  }
}

void InferenceProfilerMetrics::MergeFrom(const InferenceProfilerMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.InferenceProfilerMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_errors_.MergeFrom(from.output_errors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_reference_latency()->::tflite::evaluation::LatencyMetrics::MergeFrom(from.reference_latency());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_test_latency()->::tflite::evaluation::LatencyMetrics::MergeFrom(from.test_latency());
    }
  }
}

void InferenceProfilerMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.InferenceProfilerMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InferenceProfilerMetrics::CopyFrom(const InferenceProfilerMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.InferenceProfilerMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InferenceProfilerMetrics::IsInitialized() const {
  return true;
}

void InferenceProfilerMetrics::InternalSwap(InferenceProfilerMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&output_errors_)->InternalSwap(CastToBase(&other->output_errors_));
  swap(reference_latency_, other->reference_latency_);
  swap(test_latency_, other->test_latency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InferenceProfilerMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::InitAsDefaultInstance() {
}
class ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox>()._has_bits_);
  static void set_has_normalized_top(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_normalized_bottom(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_normalized_left(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_normalized_right(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
}
ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
}
ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox(const ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&normalized_top_, &from.normalized_top_,
    static_cast<size_t>(reinterpret_cast<char*>(&normalized_right_) -
    reinterpret_cast<char*>(&normalized_top_)) + sizeof(normalized_right_));
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
}

void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::SharedCtor() {
  ::memset(&normalized_top_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&normalized_right_) -
      reinterpret_cast<char*>(&normalized_top_)) + sizeof(normalized_right_));
}

ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::~ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  SharedDtor();
}

void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::ArenaDtor(void* object) {
  ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox* _this = reinterpret_cast< ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox* >(object);
  (void)_this;
}
void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox& ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&normalized_top_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&normalized_right_) -
        reinterpret_cast<char*>(&normalized_top_)) + sizeof(normalized_right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float normalized_top = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_normalized_top(&has_bits);
          normalized_top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float normalized_bottom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_normalized_bottom(&has_bits);
          normalized_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float normalized_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_normalized_left(&has_bits);
          normalized_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float normalized_right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_normalized_right(&has_bits);
          normalized_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float normalized_top = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_normalized_top(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normalized_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float normalized_bottom = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_normalized_bottom(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normalized_bottom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float normalized_left = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_normalized_left(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normalized_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float normalized_right = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_normalized_right(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normalized_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float normalized_top = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->normalized_top(), output);
  }

  // optional float normalized_bottom = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->normalized_bottom(), output);
  }

  // optional float normalized_left = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->normalized_left(), output);
  }

  // optional float normalized_right = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->normalized_right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float normalized_top = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->normalized_top(), target);
  }

  // optional float normalized_bottom = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->normalized_bottom(), target);
  }

  // optional float normalized_left = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->normalized_left(), target);
  }

  // optional float normalized_right = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->normalized_right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  return target;
}

size_t ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float normalized_top = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float normalized_bottom = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float normalized_left = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float normalized_right = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
    MergeFrom(*source);
  }
}

void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::MergeFrom(const ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      normalized_top_ = from.normalized_top_;
    }
    if (cached_has_bits & 0x00000002u) {
      normalized_bottom_ = from.normalized_bottom_;
    }
    if (cached_has_bits & 0x00000004u) {
      normalized_left_ = from.normalized_left_;
    }
    if (cached_has_bits & 0x00000008u) {
      normalized_right_ = from.normalized_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::CopyFrom(const ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::IsInitialized() const {
  return true;
}

void ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::InternalSwap(ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(normalized_top_, other->normalized_top_);
  swap(normalized_bottom_, other->normalized_bottom_);
  swap(normalized_left_, other->normalized_left_);
  swap(normalized_right_, other->normalized_right_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDetectionResult_ObjectInstance::InitAsDefaultInstance() {
  ::tflite::evaluation::_ObjectDetectionResult_ObjectInstance_default_instance_._instance.get_mutable()->bounding_box_ = const_cast< ::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox*>(
      ::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::internal_default_instance());
}
class ObjectDetectionResult_ObjectInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDetectionResult_ObjectInstance>()._has_bits_);
  static void set_has_class_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox& bounding_box(const ObjectDetectionResult_ObjectInstance* msg);
  static void set_has_bounding_box(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox&
ObjectDetectionResult_ObjectInstance::_Internal::bounding_box(const ObjectDetectionResult_ObjectInstance* msg) {
  return *msg->bounding_box_;
}
void ObjectDetectionResult_ObjectInstance::unsafe_arena_set_allocated_bounding_box(
    ::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox* bounding_box) {
  if (GetArenaNoVirtual() == nullptr) {
    delete bounding_box_;
  }
  bounding_box_ = bounding_box;
  if (bounding_box) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ObjectDetectionResult.ObjectInstance.bounding_box)
}
ObjectDetectionResult_ObjectInstance::ObjectDetectionResult_ObjectInstance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
}
ObjectDetectionResult_ObjectInstance::ObjectDetectionResult_ObjectInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
}
ObjectDetectionResult_ObjectInstance::ObjectDetectionResult_ObjectInstance(const ObjectDetectionResult_ObjectInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bounding_box()) {
    bounding_box_ = new ::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = nullptr;
  }
  ::memcpy(&class_id_, &from.class_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&class_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
}

void ObjectDetectionResult_ObjectInstance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectDetectionResult_ObjectInstance_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  ::memset(&bounding_box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class_id_) -
      reinterpret_cast<char*>(&bounding_box_)) + sizeof(class_id_));
  score_ = 1;
}

ObjectDetectionResult_ObjectInstance::~ObjectDetectionResult_ObjectInstance() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  SharedDtor();
}

void ObjectDetectionResult_ObjectInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete bounding_box_;
}

void ObjectDetectionResult_ObjectInstance::ArenaDtor(void* object) {
  ObjectDetectionResult_ObjectInstance* _this = reinterpret_cast< ObjectDetectionResult_ObjectInstance* >(object);
  (void)_this;
}
void ObjectDetectionResult_ObjectInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectDetectionResult_ObjectInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDetectionResult_ObjectInstance& ObjectDetectionResult_ObjectInstance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDetectionResult_ObjectInstance_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ObjectDetectionResult_ObjectInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(bounding_box_ != nullptr);
    bounding_box_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    class_id_ = 0;
    score_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectDetectionResult_ObjectInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 class_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_class_id(&has_bits);
          class_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox bounding_box = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_bounding_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float score = 3 [default = 1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectDetectionResult_ObjectInstance::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 class_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_class_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox bounding_box = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 3 [default = 1];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectDetectionResult_ObjectInstance::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 class_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }

  // optional .tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox bounding_box = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::bounding_box(this), output);
  }

  // optional float score = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetectionResult_ObjectInstance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 class_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }

  // optional .tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox bounding_box = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::bounding_box(this), target);
  }

  // optional float score = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  return target;
}

size_t ObjectDetectionResult_ObjectInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox bounding_box = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bounding_box_);
    }

    // optional int32 class_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

    // optional float score = 3 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetectionResult_ObjectInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetectionResult_ObjectInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetectionResult_ObjectInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
    MergeFrom(*source);
  }
}

void ObjectDetectionResult_ObjectInstance::MergeFrom(const ObjectDetectionResult_ObjectInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_bounding_box()->::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox::MergeFrom(from.bounding_box());
    }
    if (cached_has_bits & 0x00000002u) {
      class_id_ = from.class_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectDetectionResult_ObjectInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetectionResult_ObjectInstance::CopyFrom(const ObjectDetectionResult_ObjectInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ObjectDetectionResult.ObjectInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionResult_ObjectInstance::IsInitialized() const {
  return true;
}

void ObjectDetectionResult_ObjectInstance::InternalSwap(ObjectDetectionResult_ObjectInstance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bounding_box_, other->bounding_box_);
  swap(class_id_, other->class_id_);
  swap(score_, other->score_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetectionResult_ObjectInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDetectionResult::InitAsDefaultInstance() {
}
class ObjectDetectionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDetectionResult>()._has_bits_);
  static void set_has_image_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObjectDetectionResult::ObjectDetectionResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ObjectDetectionResult)
}
ObjectDetectionResult::ObjectDetectionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ObjectDetectionResult)
}
ObjectDetectionResult::ObjectDetectionResult(const ObjectDetectionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_image_name()) {
    image_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_name(),
      GetArenaNoVirtual());
  }
  image_id_ = from.image_id_;
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ObjectDetectionResult)
}

void ObjectDetectionResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectDetectionResult_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  image_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_id_ = PROTOBUF_LONGLONG(0);
}

ObjectDetectionResult::~ObjectDetectionResult() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ObjectDetectionResult)
  SharedDtor();
}

void ObjectDetectionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  image_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectDetectionResult::ArenaDtor(void* object) {
  ObjectDetectionResult* _this = reinterpret_cast< ObjectDetectionResult* >(object);
  (void)_this;
}
void ObjectDetectionResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectDetectionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDetectionResult& ObjectDetectionResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDetectionResult_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ObjectDetectionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ObjectDetectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    image_name_.ClearNonDefaultToEmpty();
  }
  image_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectDetectionResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tflite.evaluation.ObjectDetectionResult.ObjectInstance objects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional string image_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_image_name(), ptr, ctx, "tflite.evaluation.ObjectDetectionResult.image_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 image_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_image_id(&has_bits);
          image_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectDetectionResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ObjectDetectionResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tflite.evaluation.ObjectDetectionResult.ObjectInstance objects = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_objects()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_image_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_name().data(), static_cast<int>(this->image_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "tflite.evaluation.ObjectDetectionResult.image_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 image_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_image_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &image_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ObjectDetectionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ObjectDetectionResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectDetectionResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ObjectDetectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ObjectDetectionResult.ObjectInstance objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->objects(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string image_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_name().data(), static_cast<int>(this->image_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.evaluation.ObjectDetectionResult.image_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image_name(), output);
  }

  // optional int64 image_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->image_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ObjectDetectionResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetectionResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ObjectDetectionResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ObjectDetectionResult.ObjectInstance objects = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->objects_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->objects(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string image_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_name().data(), static_cast<int>(this->image_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tflite.evaluation.ObjectDetectionResult.image_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->image_name(), target);
  }

  // optional int64 image_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->image_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ObjectDetectionResult)
  return target;
}

size_t ObjectDetectionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ObjectDetectionResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ObjectDetectionResult.ObjectInstance objects = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->objects_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->objects(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string image_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->image_name());
    }

    // optional int64 image_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->image_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetectionResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ObjectDetectionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetectionResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetectionResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ObjectDetectionResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ObjectDetectionResult)
    MergeFrom(*source);
  }
}

void ObjectDetectionResult::MergeFrom(const ObjectDetectionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ObjectDetectionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      set_image_name(from.image_name());
    }
    if (cached_has_bits & 0x00000002u) {
      image_id_ = from.image_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectDetectionResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ObjectDetectionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetectionResult::CopyFrom(const ObjectDetectionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ObjectDetectionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionResult::IsInitialized() const {
  return true;
}

void ObjectDetectionResult::InternalSwap(ObjectDetectionResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&objects_)->InternalSwap(CastToBase(&other->objects_));
  image_name_.Swap(&other->image_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(image_id_, other->image_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetectionResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDetectionGroundTruth::InitAsDefaultInstance() {
}
class ObjectDetectionGroundTruth::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDetectionGroundTruth>()._has_bits_);
};

ObjectDetectionGroundTruth::ObjectDetectionGroundTruth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ObjectDetectionGroundTruth)
}
ObjectDetectionGroundTruth::ObjectDetectionGroundTruth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  detection_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ObjectDetectionGroundTruth)
}
ObjectDetectionGroundTruth::ObjectDetectionGroundTruth(const ObjectDetectionGroundTruth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      detection_results_(from.detection_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ObjectDetectionGroundTruth)
}

void ObjectDetectionGroundTruth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectDetectionGroundTruth_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
}

ObjectDetectionGroundTruth::~ObjectDetectionGroundTruth() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ObjectDetectionGroundTruth)
  SharedDtor();
}

void ObjectDetectionGroundTruth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ObjectDetectionGroundTruth::ArenaDtor(void* object) {
  ObjectDetectionGroundTruth* _this = reinterpret_cast< ObjectDetectionGroundTruth* >(object);
  (void)_this;
}
void ObjectDetectionGroundTruth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectDetectionGroundTruth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDetectionGroundTruth& ObjectDetectionGroundTruth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDetectionGroundTruth_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ObjectDetectionGroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ObjectDetectionGroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_results_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectDetectionGroundTruth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tflite.evaluation.ObjectDetectionResult detection_results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_detection_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectDetectionGroundTruth::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ObjectDetectionGroundTruth)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tflite.evaluation.ObjectDetectionResult detection_results = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_detection_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ObjectDetectionGroundTruth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ObjectDetectionGroundTruth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectDetectionGroundTruth::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ObjectDetectionGroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ObjectDetectionResult detection_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_results_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->detection_results(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ObjectDetectionGroundTruth)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetectionGroundTruth::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ObjectDetectionGroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ObjectDetectionResult detection_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_results_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->detection_results(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ObjectDetectionGroundTruth)
  return target;
}

size_t ObjectDetectionGroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ObjectDetectionGroundTruth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ObjectDetectionResult detection_results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->detection_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->detection_results(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetectionGroundTruth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ObjectDetectionGroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetectionGroundTruth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetectionGroundTruth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ObjectDetectionGroundTruth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ObjectDetectionGroundTruth)
    MergeFrom(*source);
  }
}

void ObjectDetectionGroundTruth::MergeFrom(const ObjectDetectionGroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ObjectDetectionGroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_results_.MergeFrom(from.detection_results_);
}

void ObjectDetectionGroundTruth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ObjectDetectionGroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetectionGroundTruth::CopyFrom(const ObjectDetectionGroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ObjectDetectionGroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionGroundTruth::IsInitialized() const {
  return true;
}

void ObjectDetectionGroundTruth::InternalSwap(ObjectDetectionGroundTruth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&detection_results_)->InternalSwap(CastToBase(&other->detection_results_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetectionGroundTruth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDetectionAveragePrecisionParams::InitAsDefaultInstance() {
}
class ObjectDetectionAveragePrecisionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDetectionAveragePrecisionParams>()._has_bits_);
  static void set_has_num_classes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_recall_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObjectDetectionAveragePrecisionParams::ObjectDetectionAveragePrecisionParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
}
ObjectDetectionAveragePrecisionParams::ObjectDetectionAveragePrecisionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  iou_thresholds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
}
ObjectDetectionAveragePrecisionParams::ObjectDetectionAveragePrecisionParams(const ObjectDetectionAveragePrecisionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      iou_thresholds_(from.iou_thresholds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_classes_, &from.num_classes_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_recall_points_) -
    reinterpret_cast<char*>(&num_classes_)) + sizeof(num_recall_points_));
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
}

void ObjectDetectionAveragePrecisionParams::SharedCtor() {
  num_classes_ = 0;
  num_recall_points_ = 100;
}

ObjectDetectionAveragePrecisionParams::~ObjectDetectionAveragePrecisionParams() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  SharedDtor();
}

void ObjectDetectionAveragePrecisionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ObjectDetectionAveragePrecisionParams::ArenaDtor(void* object) {
  ObjectDetectionAveragePrecisionParams* _this = reinterpret_cast< ObjectDetectionAveragePrecisionParams* >(object);
  (void)_this;
}
void ObjectDetectionAveragePrecisionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectDetectionAveragePrecisionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDetectionAveragePrecisionParams& ObjectDetectionAveragePrecisionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDetectionAveragePrecisionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ObjectDetectionAveragePrecisionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  iou_thresholds_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    num_classes_ = 0;
    num_recall_points_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectDetectionAveragePrecisionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 num_classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_classes(&has_bits);
          num_classes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float iou_thresholds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_iou_thresholds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 21);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_iou_thresholds(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_recall_points = 3 [default = 100];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_recall_points(&has_bits);
          num_recall_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectDetectionAveragePrecisionParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_classes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_classes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float iou_thresholds = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21u, input, this->mutable_iou_thresholds())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_iou_thresholds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_recall_points = 3 [default = 100];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_recall_points(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_recall_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectDetectionAveragePrecisionParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_classes(), output);
  }

  // repeated float iou_thresholds = 2;
  for (int i = 0, n = this->iou_thresholds_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      2, this->iou_thresholds(i), output);
  }

  // optional int32 num_recall_points = 3 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_recall_points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetectionAveragePrecisionParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 num_classes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_classes(), target);
  }

  // repeated float iou_thresholds = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFloatToArray(2, this->iou_thresholds_, target);

  // optional int32 num_recall_points = 3 [default = 100];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_recall_points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  return target;
}

size_t ObjectDetectionAveragePrecisionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float iou_thresholds = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->iou_thresholds_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->iou_thresholds_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 num_classes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_classes());
    }

    // optional int32 num_recall_points = 3 [default = 100];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_recall_points());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetectionAveragePrecisionParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetectionAveragePrecisionParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetectionAveragePrecisionParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
    MergeFrom(*source);
  }
}

void ObjectDetectionAveragePrecisionParams::MergeFrom(const ObjectDetectionAveragePrecisionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  iou_thresholds_.MergeFrom(from.iou_thresholds_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_classes_ = from.num_classes_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_recall_points_ = from.num_recall_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectDetectionAveragePrecisionParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetectionAveragePrecisionParams::CopyFrom(const ObjectDetectionAveragePrecisionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionAveragePrecisionParams::IsInitialized() const {
  return true;
}

void ObjectDetectionAveragePrecisionParams::InternalSwap(ObjectDetectionAveragePrecisionParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  iou_thresholds_.InternalSwap(&other->iou_thresholds_);
  swap(num_classes_, other->num_classes_);
  swap(num_recall_points_, other->num_recall_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetectionAveragePrecisionParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::InitAsDefaultInstance() {
}
class ObjectDetectionAveragePrecisionMetrics_AveragePrecision::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDetectionAveragePrecisionMetrics_AveragePrecision>()._has_bits_);
  static void set_has_iou_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_average_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ObjectDetectionAveragePrecisionMetrics_AveragePrecision::ObjectDetectionAveragePrecisionMetrics_AveragePrecision()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
}
ObjectDetectionAveragePrecisionMetrics_AveragePrecision::ObjectDetectionAveragePrecisionMetrics_AveragePrecision(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
}
ObjectDetectionAveragePrecisionMetrics_AveragePrecision::ObjectDetectionAveragePrecisionMetrics_AveragePrecision(const ObjectDetectionAveragePrecisionMetrics_AveragePrecision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&iou_threshold_, &from.iou_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&average_precision_) -
    reinterpret_cast<char*>(&iou_threshold_)) + sizeof(average_precision_));
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
}

void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::SharedCtor() {
  ::memset(&iou_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_precision_) -
      reinterpret_cast<char*>(&iou_threshold_)) + sizeof(average_precision_));
}

ObjectDetectionAveragePrecisionMetrics_AveragePrecision::~ObjectDetectionAveragePrecisionMetrics_AveragePrecision() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  SharedDtor();
}

void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::ArenaDtor(void* object) {
  ObjectDetectionAveragePrecisionMetrics_AveragePrecision* _this = reinterpret_cast< ObjectDetectionAveragePrecisionMetrics_AveragePrecision* >(object);
  (void)_this;
}
void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDetectionAveragePrecisionMetrics_AveragePrecision& ObjectDetectionAveragePrecisionMetrics_AveragePrecision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDetectionAveragePrecisionMetrics_AveragePrecision_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&iou_threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&average_precision_) -
        reinterpret_cast<char*>(&iou_threshold_)) + sizeof(average_precision_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectDetectionAveragePrecisionMetrics_AveragePrecision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float iou_threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_iou_threshold(&has_bits);
          iou_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float average_precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_average_precision(&has_bits);
          average_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectDetectionAveragePrecisionMetrics_AveragePrecision::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float iou_threshold = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_iou_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &iou_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float average_precision = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_average_precision(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &average_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float iou_threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->iou_threshold(), output);
  }

  // optional float average_precision = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->average_precision(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetectionAveragePrecisionMetrics_AveragePrecision::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float iou_threshold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->iou_threshold(), target);
  }

  // optional float average_precision = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->average_precision(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  return target;
}

size_t ObjectDetectionAveragePrecisionMetrics_AveragePrecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float iou_threshold = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float average_precision = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetectionAveragePrecisionMetrics_AveragePrecision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetectionAveragePrecisionMetrics_AveragePrecision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
    MergeFrom(*source);
  }
}

void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::MergeFrom(const ObjectDetectionAveragePrecisionMetrics_AveragePrecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      iou_threshold_ = from.iou_threshold_;
    }
    if (cached_has_bits & 0x00000002u) {
      average_precision_ = from.average_precision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::CopyFrom(const ObjectDetectionAveragePrecisionMetrics_AveragePrecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionAveragePrecisionMetrics_AveragePrecision::IsInitialized() const {
  return true;
}

void ObjectDetectionAveragePrecisionMetrics_AveragePrecision::InternalSwap(ObjectDetectionAveragePrecisionMetrics_AveragePrecision* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(iou_threshold_, other->iou_threshold_);
  swap(average_precision_, other->average_precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetectionAveragePrecisionMetrics_AveragePrecision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDetectionAveragePrecisionMetrics::InitAsDefaultInstance() {
}
class ObjectDetectionAveragePrecisionMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDetectionAveragePrecisionMetrics>()._has_bits_);
  static void set_has_overall_mean_average_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ObjectDetectionAveragePrecisionMetrics::ObjectDetectionAveragePrecisionMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
}
ObjectDetectionAveragePrecisionMetrics::ObjectDetectionAveragePrecisionMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  individual_average_precisions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
}
ObjectDetectionAveragePrecisionMetrics::ObjectDetectionAveragePrecisionMetrics(const ObjectDetectionAveragePrecisionMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      individual_average_precisions_(from.individual_average_precisions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  overall_mean_average_precision_ = from.overall_mean_average_precision_;
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
}

void ObjectDetectionAveragePrecisionMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectDetectionAveragePrecisionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  overall_mean_average_precision_ = 0;
}

ObjectDetectionAveragePrecisionMetrics::~ObjectDetectionAveragePrecisionMetrics() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  SharedDtor();
}

void ObjectDetectionAveragePrecisionMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void ObjectDetectionAveragePrecisionMetrics::ArenaDtor(void* object) {
  ObjectDetectionAveragePrecisionMetrics* _this = reinterpret_cast< ObjectDetectionAveragePrecisionMetrics* >(object);
  (void)_this;
}
void ObjectDetectionAveragePrecisionMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectDetectionAveragePrecisionMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDetectionAveragePrecisionMetrics& ObjectDetectionAveragePrecisionMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDetectionAveragePrecisionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ObjectDetectionAveragePrecisionMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  individual_average_precisions_.Clear();
  overall_mean_average_precision_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectDetectionAveragePrecisionMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision individual_average_precisions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_individual_average_precisions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional float overall_mean_average_precision = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_overall_mean_average_precision(&has_bits);
          overall_mean_average_precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectDetectionAveragePrecisionMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision individual_average_precisions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_individual_average_precisions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float overall_mean_average_precision = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_overall_mean_average_precision(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overall_mean_average_precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectDetectionAveragePrecisionMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision individual_average_precisions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->individual_average_precisions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->individual_average_precisions(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float overall_mean_average_precision = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->overall_mean_average_precision(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetectionAveragePrecisionMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision individual_average_precisions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->individual_average_precisions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->individual_average_precisions(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float overall_mean_average_precision = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->overall_mean_average_precision(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  return target;
}

size_t ObjectDetectionAveragePrecisionMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision individual_average_precisions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->individual_average_precisions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->individual_average_precisions(static_cast<int>(i)));
    }
  }

  // optional float overall_mean_average_precision = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetectionAveragePrecisionMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetectionAveragePrecisionMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetectionAveragePrecisionMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
    MergeFrom(*source);
  }
}

void ObjectDetectionAveragePrecisionMetrics::MergeFrom(const ObjectDetectionAveragePrecisionMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  individual_average_precisions_.MergeFrom(from.individual_average_precisions_);
  if (from.has_overall_mean_average_precision()) {
    set_overall_mean_average_precision(from.overall_mean_average_precision());
  }
}

void ObjectDetectionAveragePrecisionMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetectionAveragePrecisionMetrics::CopyFrom(const ObjectDetectionAveragePrecisionMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ObjectDetectionAveragePrecisionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionAveragePrecisionMetrics::IsInitialized() const {
  return true;
}

void ObjectDetectionAveragePrecisionMetrics::InternalSwap(ObjectDetectionAveragePrecisionMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&individual_average_precisions_)->InternalSwap(CastToBase(&other->individual_average_precisions_));
  swap(overall_mean_average_precision_, other->overall_mean_average_precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetectionAveragePrecisionMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDetectionParams::InitAsDefaultInstance() {
  ::tflite::evaluation::_ObjectDetectionParams_default_instance_._instance.get_mutable()->inference_params_ = const_cast< ::tflite::evaluation::TfliteInferenceParams*>(
      ::tflite::evaluation::TfliteInferenceParams::internal_default_instance());
  ::tflite::evaluation::_ObjectDetectionParams_default_instance_._instance.get_mutable()->ap_params_ = const_cast< ::tflite::evaluation::ObjectDetectionAveragePrecisionParams*>(
      ::tflite::evaluation::ObjectDetectionAveragePrecisionParams::internal_default_instance());
}
class ObjectDetectionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDetectionParams>()._has_bits_);
  static const ::tflite::evaluation::TfliteInferenceParams& inference_params(const ObjectDetectionParams* msg);
  static void set_has_inference_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_class_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tflite::evaluation::ObjectDetectionAveragePrecisionParams& ap_params(const ObjectDetectionParams* msg);
  static void set_has_ap_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tflite::evaluation::TfliteInferenceParams&
ObjectDetectionParams::_Internal::inference_params(const ObjectDetectionParams* msg) {
  return *msg->inference_params_;
}
const ::tflite::evaluation::ObjectDetectionAveragePrecisionParams&
ObjectDetectionParams::_Internal::ap_params(const ObjectDetectionParams* msg) {
  return *msg->ap_params_;
}
void ObjectDetectionParams::unsafe_arena_set_allocated_inference_params(
    ::tflite::evaluation::TfliteInferenceParams* inference_params) {
  if (GetArenaNoVirtual() == nullptr) {
    delete inference_params_;
  }
  inference_params_ = inference_params;
  if (inference_params) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ObjectDetectionParams.inference_params)
}
void ObjectDetectionParams::unsafe_arena_set_allocated_ap_params(
    ::tflite::evaluation::ObjectDetectionAveragePrecisionParams* ap_params) {
  if (GetArenaNoVirtual() == nullptr) {
    delete ap_params_;
  }
  ap_params_ = ap_params;
  if (ap_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ObjectDetectionParams.ap_params)
}
ObjectDetectionParams::ObjectDetectionParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ObjectDetectionParams)
}
ObjectDetectionParams::ObjectDetectionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ObjectDetectionParams)
}
ObjectDetectionParams::ObjectDetectionParams(const ObjectDetectionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_inference_params()) {
    inference_params_ = new ::tflite::evaluation::TfliteInferenceParams(*from.inference_params_);
  } else {
    inference_params_ = nullptr;
  }
  if (from.has_ap_params()) {
    ap_params_ = new ::tflite::evaluation::ObjectDetectionAveragePrecisionParams(*from.ap_params_);
  } else {
    ap_params_ = nullptr;
  }
  class_offset_ = from.class_offset_;
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ObjectDetectionParams)
}

void ObjectDetectionParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectDetectionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  ::memset(&inference_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_params_) -
      reinterpret_cast<char*>(&inference_params_)) + sizeof(ap_params_));
  class_offset_ = 1;
}

ObjectDetectionParams::~ObjectDetectionParams() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ObjectDetectionParams)
  SharedDtor();
}

void ObjectDetectionParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete inference_params_;
  if (this != internal_default_instance()) delete ap_params_;
}

void ObjectDetectionParams::ArenaDtor(void* object) {
  ObjectDetectionParams* _this = reinterpret_cast< ObjectDetectionParams* >(object);
  (void)_this;
}
void ObjectDetectionParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectDetectionParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDetectionParams& ObjectDetectionParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDetectionParams_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ObjectDetectionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ObjectDetectionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(inference_params_ != nullptr);
      inference_params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ap_params_ != nullptr);
      ap_params_->Clear();
    }
    class_offset_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectDetectionParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .tflite.evaluation.TfliteInferenceParams inference_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_inference_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 class_offset = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_class_offset(&has_bits);
          class_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.ObjectDetectionAveragePrecisionParams ap_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ap_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectDetectionParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ObjectDetectionParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tflite.evaluation.TfliteInferenceParams inference_params = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inference_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 class_offset = 2 [default = 1];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_class_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.ObjectDetectionAveragePrecisionParams ap_params = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ap_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ObjectDetectionParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ObjectDetectionParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectDetectionParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ObjectDetectionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.TfliteInferenceParams inference_params = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::inference_params(this), output);
  }

  // optional int32 class_offset = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->class_offset(), output);
  }

  // optional .tflite.evaluation.ObjectDetectionAveragePrecisionParams ap_params = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::ap_params(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ObjectDetectionParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetectionParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ObjectDetectionParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.TfliteInferenceParams inference_params = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::inference_params(this), target);
  }

  // optional int32 class_offset = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->class_offset(), target);
  }

  // optional .tflite.evaluation.ObjectDetectionAveragePrecisionParams ap_params = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::ap_params(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ObjectDetectionParams)
  return target;
}

size_t ObjectDetectionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ObjectDetectionParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .tflite.evaluation.TfliteInferenceParams inference_params = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_params_);
    }

    // optional .tflite.evaluation.ObjectDetectionAveragePrecisionParams ap_params = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ap_params_);
    }

    // optional int32 class_offset = 2 [default = 1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->class_offset());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetectionParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ObjectDetectionParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetectionParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetectionParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ObjectDetectionParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ObjectDetectionParams)
    MergeFrom(*source);
  }
}

void ObjectDetectionParams::MergeFrom(const ObjectDetectionParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ObjectDetectionParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_inference_params()->::tflite::evaluation::TfliteInferenceParams::MergeFrom(from.inference_params());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ap_params()->::tflite::evaluation::ObjectDetectionAveragePrecisionParams::MergeFrom(from.ap_params());
    }
    if (cached_has_bits & 0x00000004u) {
      class_offset_ = from.class_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjectDetectionParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ObjectDetectionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetectionParams::CopyFrom(const ObjectDetectionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ObjectDetectionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionParams::IsInitialized() const {
  return true;
}

void ObjectDetectionParams::InternalSwap(ObjectDetectionParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(inference_params_, other->inference_params_);
  swap(ap_params_, other->ap_params_);
  swap(class_offset_, other->class_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetectionParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObjectDetectionMetrics::InitAsDefaultInstance() {
  ::tflite::evaluation::_ObjectDetectionMetrics_default_instance_._instance.get_mutable()->pre_processing_latency_ = const_cast< ::tflite::evaluation::LatencyMetrics*>(
      ::tflite::evaluation::LatencyMetrics::internal_default_instance());
  ::tflite::evaluation::_ObjectDetectionMetrics_default_instance_._instance.get_mutable()->inference_latency_ = const_cast< ::tflite::evaluation::LatencyMetrics*>(
      ::tflite::evaluation::LatencyMetrics::internal_default_instance());
  ::tflite::evaluation::_ObjectDetectionMetrics_default_instance_._instance.get_mutable()->inference_metrics_ = const_cast< ::tflite::evaluation::TfliteInferenceMetrics*>(
      ::tflite::evaluation::TfliteInferenceMetrics::internal_default_instance());
  ::tflite::evaluation::_ObjectDetectionMetrics_default_instance_._instance.get_mutable()->average_precision_metrics_ = const_cast< ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics*>(
      ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics::internal_default_instance());
}
class ObjectDetectionMetrics::_Internal {
 public:
  using HasBits = decltype(std::declval<ObjectDetectionMetrics>()._has_bits_);
  static const ::tflite::evaluation::LatencyMetrics& pre_processing_latency(const ObjectDetectionMetrics* msg);
  static void set_has_pre_processing_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tflite::evaluation::LatencyMetrics& inference_latency(const ObjectDetectionMetrics* msg);
  static void set_has_inference_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tflite::evaluation::TfliteInferenceMetrics& inference_metrics(const ObjectDetectionMetrics* msg);
  static void set_has_inference_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics& average_precision_metrics(const ObjectDetectionMetrics* msg);
  static void set_has_average_precision_metrics(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::tflite::evaluation::LatencyMetrics&
ObjectDetectionMetrics::_Internal::pre_processing_latency(const ObjectDetectionMetrics* msg) {
  return *msg->pre_processing_latency_;
}
const ::tflite::evaluation::LatencyMetrics&
ObjectDetectionMetrics::_Internal::inference_latency(const ObjectDetectionMetrics* msg) {
  return *msg->inference_latency_;
}
const ::tflite::evaluation::TfliteInferenceMetrics&
ObjectDetectionMetrics::_Internal::inference_metrics(const ObjectDetectionMetrics* msg) {
  return *msg->inference_metrics_;
}
const ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics&
ObjectDetectionMetrics::_Internal::average_precision_metrics(const ObjectDetectionMetrics* msg) {
  return *msg->average_precision_metrics_;
}
void ObjectDetectionMetrics::unsafe_arena_set_allocated_pre_processing_latency(
    ::tflite::evaluation::LatencyMetrics* pre_processing_latency) {
  if (GetArenaNoVirtual() == nullptr) {
    delete pre_processing_latency_;
  }
  pre_processing_latency_ = pre_processing_latency;
  if (pre_processing_latency) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ObjectDetectionMetrics.pre_processing_latency)
}
void ObjectDetectionMetrics::unsafe_arena_set_allocated_inference_latency(
    ::tflite::evaluation::LatencyMetrics* inference_latency) {
  if (GetArenaNoVirtual() == nullptr) {
    delete inference_latency_;
  }
  inference_latency_ = inference_latency;
  if (inference_latency) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ObjectDetectionMetrics.inference_latency)
}
void ObjectDetectionMetrics::unsafe_arena_set_allocated_inference_metrics(
    ::tflite::evaluation::TfliteInferenceMetrics* inference_metrics) {
  if (GetArenaNoVirtual() == nullptr) {
    delete inference_metrics_;
  }
  inference_metrics_ = inference_metrics;
  if (inference_metrics) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ObjectDetectionMetrics.inference_metrics)
}
void ObjectDetectionMetrics::unsafe_arena_set_allocated_average_precision_metrics(
    ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics* average_precision_metrics) {
  if (GetArenaNoVirtual() == nullptr) {
    delete average_precision_metrics_;
  }
  average_precision_metrics_ = average_precision_metrics;
  if (average_precision_metrics) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tflite.evaluation.ObjectDetectionMetrics.average_precision_metrics)
}
ObjectDetectionMetrics::ObjectDetectionMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tflite.evaluation.ObjectDetectionMetrics)
}
ObjectDetectionMetrics::ObjectDetectionMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tflite.evaluation.ObjectDetectionMetrics)
}
ObjectDetectionMetrics::ObjectDetectionMetrics(const ObjectDetectionMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pre_processing_latency()) {
    pre_processing_latency_ = new ::tflite::evaluation::LatencyMetrics(*from.pre_processing_latency_);
  } else {
    pre_processing_latency_ = nullptr;
  }
  if (from.has_inference_latency()) {
    inference_latency_ = new ::tflite::evaluation::LatencyMetrics(*from.inference_latency_);
  } else {
    inference_latency_ = nullptr;
  }
  if (from.has_inference_metrics()) {
    inference_metrics_ = new ::tflite::evaluation::TfliteInferenceMetrics(*from.inference_metrics_);
  } else {
    inference_metrics_ = nullptr;
  }
  if (from.has_average_precision_metrics()) {
    average_precision_metrics_ = new ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics(*from.average_precision_metrics_);
  } else {
    average_precision_metrics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:tflite.evaluation.ObjectDetectionMetrics)
}

void ObjectDetectionMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ObjectDetectionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  ::memset(&pre_processing_latency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&average_precision_metrics_) -
      reinterpret_cast<char*>(&pre_processing_latency_)) + sizeof(average_precision_metrics_));
}

ObjectDetectionMetrics::~ObjectDetectionMetrics() {
  // @@protoc_insertion_point(destructor:tflite.evaluation.ObjectDetectionMetrics)
  SharedDtor();
}

void ObjectDetectionMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete pre_processing_latency_;
  if (this != internal_default_instance()) delete inference_latency_;
  if (this != internal_default_instance()) delete inference_metrics_;
  if (this != internal_default_instance()) delete average_precision_metrics_;
}

void ObjectDetectionMetrics::ArenaDtor(void* object) {
  ObjectDetectionMetrics* _this = reinterpret_cast< ObjectDetectionMetrics* >(object);
  (void)_this;
}
void ObjectDetectionMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectDetectionMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObjectDetectionMetrics& ObjectDetectionMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObjectDetectionMetrics_tensorflow_2flite_2ftools_2fevaluation_2fproto_2fevaluation_5fstages_2eproto.base);
  return *internal_default_instance();
}


void ObjectDetectionMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.evaluation.ObjectDetectionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pre_processing_latency_ != nullptr);
      pre_processing_latency_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(inference_latency_ != nullptr);
      inference_latency_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(inference_metrics_ != nullptr);
      inference_metrics_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(average_precision_metrics_ != nullptr);
      average_precision_metrics_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ObjectDetectionMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .tflite.evaluation.LatencyMetrics pre_processing_latency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pre_processing_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.LatencyMetrics inference_latency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_inference_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.TfliteInferenceMetrics inference_metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_inference_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics average_precision_metrics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_average_precision_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ObjectDetectionMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:tflite.evaluation.ObjectDetectionMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tflite.evaluation.LatencyMetrics pre_processing_latency = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pre_processing_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.LatencyMetrics inference_latency = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inference_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.TfliteInferenceMetrics inference_metrics = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inference_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics average_precision_metrics = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_average_precision_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tflite.evaluation.ObjectDetectionMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tflite.evaluation.ObjectDetectionMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ObjectDetectionMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tflite.evaluation.ObjectDetectionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.LatencyMetrics pre_processing_latency = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pre_processing_latency(this), output);
  }

  // optional .tflite.evaluation.LatencyMetrics inference_latency = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::inference_latency(this), output);
  }

  // optional .tflite.evaluation.TfliteInferenceMetrics inference_metrics = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::inference_metrics(this), output);
  }

  // optional .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics average_precision_metrics = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::average_precision_metrics(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tflite.evaluation.ObjectDetectionMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectDetectionMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.evaluation.ObjectDetectionMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .tflite.evaluation.LatencyMetrics pre_processing_latency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pre_processing_latency(this), target);
  }

  // optional .tflite.evaluation.LatencyMetrics inference_latency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::inference_latency(this), target);
  }

  // optional .tflite.evaluation.TfliteInferenceMetrics inference_metrics = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::inference_metrics(this), target);
  }

  // optional .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics average_precision_metrics = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::average_precision_metrics(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.evaluation.ObjectDetectionMetrics)
  return target;
}

size_t ObjectDetectionMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.evaluation.ObjectDetectionMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .tflite.evaluation.LatencyMetrics pre_processing_latency = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pre_processing_latency_);
    }

    // optional .tflite.evaluation.LatencyMetrics inference_latency = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_latency_);
    }

    // optional .tflite.evaluation.TfliteInferenceMetrics inference_metrics = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inference_metrics_);
    }

    // optional .tflite.evaluation.ObjectDetectionAveragePrecisionMetrics average_precision_metrics = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *average_precision_metrics_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectDetectionMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tflite.evaluation.ObjectDetectionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectDetectionMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectDetectionMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tflite.evaluation.ObjectDetectionMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tflite.evaluation.ObjectDetectionMetrics)
    MergeFrom(*source);
  }
}

void ObjectDetectionMetrics::MergeFrom(const ObjectDetectionMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.evaluation.ObjectDetectionMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pre_processing_latency()->::tflite::evaluation::LatencyMetrics::MergeFrom(from.pre_processing_latency());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_inference_latency()->::tflite::evaluation::LatencyMetrics::MergeFrom(from.inference_latency());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_inference_metrics()->::tflite::evaluation::TfliteInferenceMetrics::MergeFrom(from.inference_metrics());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_average_precision_metrics()->::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics::MergeFrom(from.average_precision_metrics());
    }
  }
}

void ObjectDetectionMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tflite.evaluation.ObjectDetectionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectDetectionMetrics::CopyFrom(const ObjectDetectionMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.evaluation.ObjectDetectionMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDetectionMetrics::IsInitialized() const {
  return true;
}

void ObjectDetectionMetrics::InternalSwap(ObjectDetectionMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pre_processing_latency_, other->pre_processing_latency_);
  swap(inference_latency_, other->inference_latency_);
  swap(inference_metrics_, other->inference_metrics_);
  swap(average_precision_metrics_, other->average_precision_metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDetectionMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace evaluation
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ProcessSpecification* Arena::CreateMaybeMessage< ::tflite::evaluation::ProcessSpecification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ProcessSpecification >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::LatencyMetrics* Arena::CreateMaybeMessage< ::tflite::evaluation::LatencyMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::LatencyMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::AccuracyMetrics* Arena::CreateMaybeMessage< ::tflite::evaluation::AccuracyMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::AccuracyMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ProcessMetrics* Arena::CreateMaybeMessage< ::tflite::evaluation::ProcessMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ProcessMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ImagePreprocessingParams* Arena::CreateMaybeMessage< ::tflite::evaluation::ImagePreprocessingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ImagePreprocessingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::TfliteInferenceParams* Arena::CreateMaybeMessage< ::tflite::evaluation::TfliteInferenceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::TfliteInferenceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::TfliteInferenceMetrics* Arena::CreateMaybeMessage< ::tflite::evaluation::TfliteInferenceMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::TfliteInferenceMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::TopkAccuracyEvalParams* Arena::CreateMaybeMessage< ::tflite::evaluation::TopkAccuracyEvalParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::TopkAccuracyEvalParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::TopkAccuracyEvalMetrics* Arena::CreateMaybeMessage< ::tflite::evaluation::TopkAccuracyEvalMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::TopkAccuracyEvalMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ImageClassificationParams* Arena::CreateMaybeMessage< ::tflite::evaluation::ImageClassificationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ImageClassificationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ImageClassificationMetrics* Arena::CreateMaybeMessage< ::tflite::evaluation::ImageClassificationMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ImageClassificationMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::InferenceProfilerMetrics* Arena::CreateMaybeMessage< ::tflite::evaluation::InferenceProfilerMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::InferenceProfilerMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox* Arena::CreateMaybeMessage< ::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ObjectDetectionResult_ObjectInstance* Arena::CreateMaybeMessage< ::tflite::evaluation::ObjectDetectionResult_ObjectInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ObjectDetectionResult_ObjectInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ObjectDetectionResult* Arena::CreateMaybeMessage< ::tflite::evaluation::ObjectDetectionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ObjectDetectionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ObjectDetectionGroundTruth* Arena::CreateMaybeMessage< ::tflite::evaluation::ObjectDetectionGroundTruth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ObjectDetectionGroundTruth >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ObjectDetectionAveragePrecisionParams* Arena::CreateMaybeMessage< ::tflite::evaluation::ObjectDetectionAveragePrecisionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ObjectDetectionAveragePrecisionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics_AveragePrecision* Arena::CreateMaybeMessage< ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics_AveragePrecision >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics_AveragePrecision >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics* Arena::CreateMaybeMessage< ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ObjectDetectionAveragePrecisionMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ObjectDetectionParams* Arena::CreateMaybeMessage< ::tflite::evaluation::ObjectDetectionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ObjectDetectionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::evaluation::ObjectDetectionMetrics* Arena::CreateMaybeMessage< ::tflite::evaluation::ObjectDetectionMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::evaluation::ObjectDetectionMetrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
